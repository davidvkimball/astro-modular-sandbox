/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var A=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var $=Object.prototype.hasOwnProperty;var H=(g,o)=>{for(var e in o)A(g,e,{get:o[e],enumerable:!0})},B=(g,o,e,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let a of x(o))!$.call(g,a)&&a!==e&&A(g,a,{get:()=>o[a],enumerable:!(t=k(o,a))||t.enumerable});return g};var z=g=>B(A({},"__esModule",{value:!0}),g);var W={};H(W,{default:()=>F});module.exports=z(W);var G=require("obsidian");var _=["Inter","Roboto","Open Sans","Lato","Poppins","Source Sans Pro","Nunito","Montserrat","Playfair Display","Merriweather","Lora","Crimson Text","PT Serif","Libre Baskerville","Fira Code","JetBrains Mono","Source Code Pro","IBM Plex Mono","Cascadia Code"],M={runWizardOnStartup:!0,currentTemplate:"standard",currentTheme:"oxygen",contentOrganization:"file-based",features:{commandPalette:!0,tableOfContents:!0,readingTime:!0,linkedMentions:!0,comments:!1,graphView:!0,postNavigation:!0,scrollToTop:!0,darkModeToggleButton:"both",showSocialIconsInFooter:!0,showPostCardCoverImages:"featured-and-posts",postCardAspectRatio:"og",linkedMentionsCompact:!1},typography:{headingFont:"Inter",proseFont:"Inter",monoFont:"JetBrains Mono",fontSource:"local",customFonts:{heading:"",prose:"",mono:""}},optionalFeatures:{profilePicture:{enabled:!1,image:"/profile.jpg",alt:"Profile picture",size:"md",placement:"footer",style:"circle"},comments:{enabled:!1,provider:"giscus"}},deployment:{platform:"netlify"},pluginConfig:{obsidianSettings:{attachmentLocation:"subfolder",subfolderName:"attachments"},astroComposerSettings:{creationMode:"file-based",indexFileName:"index"},imageInserterSettings:{insertFormat:"[[attachments/{image-url}]]"}}},C=[{id:"oxygen",name:"Oxygen",description:"Modern, clean design",previewColors:["#0ea5e9","#0284c7","#f8fafc"]},{id:"minimal",name:"Minimal",description:"Understated with high contrast",previewColors:["#708794","#5a6d77","#fafafa"]},{id:"atom",name:"Atom",description:"Dark theme with vibrant accents",previewColors:["#61dafb","#1a92ff","#282c34"]},{id:"ayu-light",name:"Ayu Light",description:"Clean light theme",previewColors:["#ffcc66","#e6913d","#fefefe"]},{id:"ayu-mirage",name:"Ayu Mirage",description:"Soft dark theme",previewColors:["#ffcc66","#e6913d","#1f2430"]},{id:"ayu-dark",name:"Ayu Dark",description:"Deep dark theme",previewColors:["#ffcc66","#e6913d","#0f1419"]},{id:"catppuccin",name:"Catppuccin",description:"Pastel color palette",previewColors:["#dcb6af","#c49a8f","#1e1e2e"]},{id:"charcoal",name:"Charcoal",description:"Dark, professional look",previewColors:["#ffffff","#ff6b6b","#2d2d2d"]},{id:"dracula",name:"Dracula",description:"Dark theme with purple accents",previewColors:["#bd93f9","#8b5cf6","#282a36"]},{id:"everforest",name:"Everforest",description:"Soft, warm colors",previewColors:["#a7c080","#dbbc7f","#2d353b"]},{id:"flexoki",name:"Flexoki",description:"Based on Material Design 3",previewColors:["#ff6b6b","#e6b673","#100f0f"]},{id:"gruvbox",name:"Gruvbox",description:"Retro groove color scheme",previewColors:["#fabd2f","#b16286","#282828"]},{id:"macos",name:"macOS",description:"Native macOS appearance",previewColors:["#007aff","#34c759","#ffffff"]},{id:"nord",name:"Nord",description:"Arctic-inspired color palette",previewColors:["#88c0d0","#a3be8c","#2e3440"]},{id:"obsidian",name:"Obsidian",description:"Matches Obsidian's default theme",previewColors:["#7c3aed","#ffffff","#1e1e1e"]},{id:"rose-pine",name:"Ros\xE9 Pine",description:"All natural pine, faux fir, and winter",previewColors:["#eb6f92","#9ccfd8","#191724"]},{id:"sky",name:"Sky",description:"Light, airy design",previewColors:["#0ea5e9","#06b6d4","#f0f9ff"]},{id:"solarized",name:"Solarized",description:"Precision colors for machines and people",previewColors:["#268bd2","#859900","#002b36"]},{id:"things",name:"Things",description:"Clean, minimal design",previewColors:["#007aff","#000000","#ffffff"]}],S=[{id:"standard",name:"Standard",description:"Full-featured blog with all default options enabled",features:["Command palette","Table of contents","Reading time","Linked mentions","Footer","Social icons","Scroll to top","Dark mode toggle"],recommended:!0},{id:"compact",name:"Compact",description:"Balanced setup for smaller sites with optimized layout",features:["Command palette","Table of contents","Reading time","Compact linked mentions","Custom aspect ratio"],recommended:!1},{id:"minimal",name:"Minimal",description:"Clean, simple blog with minimal features and content",features:["Command palette","Search posts/pages","Minimal navigation"],recommended:!1},{id:"custom",name:"Custom",description:"Granular control over every setting - opens config.ts",features:["All features configurable"],recommended:!1}];var v=require("obsidian");var E=require("obsidian");var P=class{constructor(o){this.app=o,this.configPath="../config.ts",console.log("\u{1F4C1} Config path:",this.configPath)}async getConfigFileInfo(){console.log("\u{1F50D} Looking for config at:",this.configPath),console.log("\u{1F3E0} Vault root path:",this.app.vault.adapter.path);try{let o=require("fs"),e=require("path"),t=this.app.vault.adapter.basePath||this.app.vault.adapter.path;console.log("\u{1F3E0} Vault path object:",t),console.log("\u{1F3E0} Vault path type:",typeof t);let a=typeof t=="string"?t:t.toString();console.log("\u{1F3E0} Vault path string:",a);let i=e.join(a,"..","config.ts");if(console.log("\u{1F50D} Trying to read config from:",i),o.existsSync(i)){console.log("\u2705 Found config file outside vault at:",i);let r=o.readFileSync(i,"utf8"),l=o.statSync(i);return{exists:!0,path:i,content:r,lastModified:new Date(l.mtime),valid:!0,errors:[]}}else return console.log("\u274C Config file not found at:",i),{exists:!1,path:i,content:"",lastModified:new Date,valid:!1,errors:["Config file not found"]}}catch(o){return console.log("\u274C Error accessing file outside vault:",o.message),{exists:!1,path:this.configPath,content:"",lastModified:new Date,valid:!1,errors:["Cannot access file outside vault"]}}}validateConfigContent(o){return o.includes("defineConfig")||o.includes("export default")||o.includes("astro/config")}async readConfig(){return(await this.getConfigFileInfo()).content}async writeConfig(o){console.log("\u{1F4DD} ConfigManager: Attempting to write config");try{let e=require("fs"),t=require("path"),a=this.app.vault.adapter.basePath||this.app.vault.adapter.path;console.log("\u{1F3E0} Vault path object:",a),console.log("\u{1F3E0} Vault path type:",typeof a);let i=typeof a=="string"?a:a.toString();console.log("\u{1F3E0} Vault path string:",i);let r=t.join(i,"..","config.ts");return console.log("\u{1F4C1} Writing config to:",r),e.writeFileSync(r,o,"utf8"),console.log("\u2705 Config file written successfully"),!0}catch(e){return console.log("\u274C Error writing config file:",e.message),!1}}async applyPreset(o){console.log("\u{1F527} ConfigManager: Starting preset application"),console.log("\u{1F4CB} Preset:",o.name),console.log("\u2699\uFE0F Settings:",o.config);let e=await this.readConfig();console.log("\u{1F4D6} Current config length:",e.length),console.log("\u{1F4D6} Current config preview:",e.substring(0,200)+"...");let t=this.modifyConfigFromPreset(o,e);console.log("\u{1F195} Modified config length:",t.length),console.log("\u{1F195} Modified config preview:",t.substring(0,200)+"...");let a=await this.writeConfig(t);return console.log("\u{1F4BE} Write result:",a),a}modifyConfigFromPreset(o,e){var I,w;let t=o.config;console.log("\u{1F504} ConfigManager: Modifying existing config from preset"),console.log("\u{1F3A8} Theme:",t.currentTheme),console.log("\u{1F524} Fonts:",t.typography),console.log("\u{1F50D} Current config contains style:",e.includes('style: "circle"')),console.log("\u{1F50D} Current config contains pages:",e.includes("pages: false"));let a=/search:\s*\{\s*posts:\s*(true|false),\s*pages:\s*(true|false),\s*projects:\s*(true|false),\s*docs:\s*(true|false),\s*\}/,i=/url:\s*"[^"]*",?\s*\/\/ Optional\s*,\s*placement:\s*"[^"]*",?\s*\/\/ "footer" or "header"\s*,\s*style:\s*"[^"]*",?\s*\/\/ "circle", "square", or "none"/;console.log("\u{1F50D} Search regex will match:",a.test(e)),console.log("\u{1F50D} Style regex will match:",i.test(e));let r=e.match(/style:\s*"[^"]*"/g);console.log("\u{1F50D} All style matches:",r);let l=e.match(/pages:\s*(true|false)/g);console.log("\u{1F50D} All pages matches:",l);let m=/style:\s*"[^"]*",?\s*\/\/ "circle", "square", or "none"/,u=/pages:\s*(true|false),/;console.log("\u{1F50D} Style regex test:",m.test(e)),console.log("\u{1F50D} Pages regex test:",u.test(e));let c=e.match(/placement:\s*"[^"]*",?\s*\/\/ "footer" or "header"\s*,\s*style:\s*"[^"]*",?\s*\/\/ "circle", "square", or "none"/);console.log("\u{1F50D} Style context match:",c);let d=e.match(/search:\s*\{\s*posts:\s*(true|false),\s*pages:\s*(true|false),\s*projects:\s*(true|false),\s*docs:\s*(true|false),\s*\}/);console.log("\u{1F50D} Pages context match:",d);let n=this.getTemplateConfig(o.name,t),s=e;console.log("\u{1F50D} Looking for theme marker in config...");let f=e.includes("// [CONFIG:THEME]");if(console.log("\u{1F50D} Theme marker exists:",f),f){let T=/\/\/ \[CONFIG:THEME\]\s*\n\s*theme:\s*"[^"]*"/,h=e.match(T);console.log("\u{1F50D} Theme regex match:",h),s=s.replace(T,`// [CONFIG:THEME]
  theme: "${t.currentTheme}"`),console.log("\u{1F50D} Theme replacement applied")}else console.log("\u274C Theme marker not found in config!");s=s.replace(/\/\/ \[CONFIG:FONT_SOURCE\]\s*\n\s*source:\s*"[^"]*"/,`// [CONFIG:FONT_SOURCE]
    source: "${t.typography.fontSource}"`),s=s.replace(/\/\/ \[CONFIG:FONT_BODY\]\s*\n\s*body:\s*"[^"]*"/,`// [CONFIG:FONT_BODY]
      body: "${t.typography.fontSource==="cdn"?t.typography.customFonts.prose:t.typography.proseFont}"`),s=s.replace(/\/\/ \[CONFIG:FONT_HEADING\]\s*\n\s*heading:\s*"[^"]*"/,`// [CONFIG:FONT_HEADING]
      heading: "${t.typography.fontSource==="cdn"?t.typography.customFonts.heading:t.typography.headingFont}"`),s=s.replace(/\/\/ \[CONFIG:FONT_MONO\]\s*\n\s*mono:\s*"[^"]*"/,`// [CONFIG:FONT_MONO]
      mono: "${t.typography.fontSource==="cdn"?t.typography.customFonts.mono:t.typography.monoFont}"`),s=s.replace(/\/\/ \[CONFIG:DEPLOYMENT_PLATFORM\]\s*\n\s*platform:\s*"[^"]*"/,`// [CONFIG:DEPLOYMENT_PLATFORM]
    platform: "${t.deployment.platform}"`),(I=n.layout)!=null&&I.contentWidth&&(s=s.replace(/\/\/ \[CONFIG:LAYOUT_CONTENT_WIDTH\]\s*\n\s*contentWidth:\s*"[^"]*"/,`// [CONFIG:LAYOUT_CONTENT_WIDTH]
    contentWidth: "${n.layout.contentWidth}"`)),n.optionalContentTypes&&(n.optionalContentTypes.projects!==void 0&&(s=s.replace(/\/\/ \[CONFIG:OPTIONAL_CONTENT_TYPES_PROJECTS\]\s*\n\s*projects:\s*(true|false)/,`// [CONFIG:OPTIONAL_CONTENT_TYPES_PROJECTS]
    projects: ${n.optionalContentTypes.projects}`)),n.optionalContentTypes.docs!==void 0&&(s=s.replace(/\/\/ \[CONFIG:OPTIONAL_CONTENT_TYPES_DOCS\]\s*\n\s*docs:\s*(true|false)/,`// [CONFIG:OPTIONAL_CONTENT_TYPES_DOCS]
    docs: ${n.optionalContentTypes.docs}`))),n.darkModeToggleButton&&(s=s.replace(/\/\/ \[CONFIG:DARK_MODE_TOGGLE_BUTTON\]\s*\n\s*darkModeToggleButton:\s*"[^"]*"/,`// [CONFIG:DARK_MODE_TOGGLE_BUTTON]
  darkModeToggleButton: "${n.darkModeToggleButton}"`)),n.footer&&(n.footer.enabled!==void 0&&(s=s.replace(/\/\/ \[CONFIG:FOOTER_ENABLED\]\s*enabled:\s*(true|false)/,`// [CONFIG:FOOTER_ENABLED]
    enabled: ${n.footer.enabled}`)),n.footer.showSocialIconsInFooter!==void 0&&(s=s.replace(/\/\/ \[CONFIG:FOOTER_SHOW_SOCIAL_ICONS\]\s*showSocialIconsInFooter:\s*(true|false)/,`// [CONFIG:FOOTER_SHOW_SOCIAL_ICONS]
    showSocialIconsInFooter: ${n.footer.showSocialIconsInFooter}`))),n.navigation&&(n.navigation.style&&(s=s.replace(/\/\/ \[CONFIG:NAVIGATION_STYLE\]\s*style:\s*"[^"]*"/,`// [CONFIG:NAVIGATION_STYLE]
    style: "${n.navigation.style}"`)),n.navigation.showNavigation!==void 0&&(s=s.replace(/\/\/ \[CONFIG:NAVIGATION_SHOW_NAVIGATION\]\s*showNavigation:\s*(true|false)/,`// [CONFIG:NAVIGATION_SHOW_NAVIGATION]
    showNavigation: ${n.navigation.showNavigation}`)),n.navigation.showMobileMenu!==void 0&&(s=s.replace(/\/\/ \[CONFIG:NAVIGATION_SHOW_MOBILE_MENU\]\s*showMobileMenu:\s*(true|false)/,`// [CONFIG:NAVIGATION_SHOW_MOBILE_MENU]
    showMobileMenu: ${n.navigation.showMobileMenu}`))),n.commandPalette&&(n.commandPalette.enabled!==void 0&&(s=s.replace(/\/\/ \[CONFIG:COMMAND_PALETTE_ENABLED\]\s*enabled:\s*(true|false)/,`// [CONFIG:COMMAND_PALETTE_ENABLED]
    enabled: ${n.commandPalette.enabled}`)),n.commandPalette.shortcut!==void 0&&(s=s.replace(/\/\/ \[CONFIG:COMMAND_PALETTE_SHORTCUT\]\s*shortcut:\s*"[^"]*"/,`// [CONFIG:COMMAND_PALETTE_SHORTCUT]
    shortcut: "${n.commandPalette.shortcut}"`)),n.commandPalette.placeholder!==void 0&&(s=s.replace(/\/\/ \[CONFIG:COMMAND_PALETTE_PLACEHOLDER\]\s*placeholder:\s*"[^"]*"/,`// [CONFIG:COMMAND_PALETTE_PLACEHOLDER]
    placeholder: "${n.commandPalette.placeholder}"`)),n.commandPalette.search&&(console.log("\u{1F50D} Template search config:",n.commandPalette.search),n.commandPalette.search.posts!==void 0&&(s=s.replace(/\/\/ \[CONFIG:COMMAND_PALETTE_SEARCH_POSTS\]\s*posts:\s*(true|false)/,`// [CONFIG:COMMAND_PALETTE_SEARCH_POSTS]
      posts: ${n.commandPalette.search.posts}`)),n.commandPalette.search.pages!==void 0&&(s=s.replace(/\/\/ \[CONFIG:COMMAND_PALETTE_SEARCH_PAGES\]\s*pages:\s*(true|false)/,`// [CONFIG:COMMAND_PALETTE_SEARCH_PAGES]
      pages: ${n.commandPalette.search.pages}`)),n.commandPalette.search.projects!==void 0&&(s=s.replace(/\/\/ \[CONFIG:COMMAND_PALETTE_SEARCH_PROJECTS\]\s*projects:\s*(true|false)/,`// [CONFIG:COMMAND_PALETTE_SEARCH_PROJECTS]
      projects: ${n.commandPalette.search.projects}`)),n.commandPalette.search.docs!==void 0&&(s=s.replace(/\/\/ \[CONFIG:COMMAND_PALETTE_SEARCH_DOCS\]\s*docs:\s*(true|false)/,`// [CONFIG:COMMAND_PALETTE_SEARCH_DOCS]
      docs: ${n.commandPalette.search.docs}`)),console.log("\u{1F50D} Search replacement completed")),n.commandPalette.sections&&(console.log("\u{1F50D} Template sections config:",n.commandPalette.sections),n.commandPalette.sections.quickActions!==void 0&&(s=s.replace(/\/\/ \[CONFIG:COMMAND_PALETTE_SECTIONS_QUICK_ACTIONS\]\s*quickActions:\s*(true|false)/,`// [CONFIG:COMMAND_PALETTE_SECTIONS_QUICK_ACTIONS]
      quickActions: ${n.commandPalette.sections.quickActions}`)),n.commandPalette.sections.pages!==void 0&&(s=s.replace(/\/\/ \[CONFIG:COMMAND_PALETTE_SECTIONS_PAGES\]\s*pages:\s*(true|false)/,`// [CONFIG:COMMAND_PALETTE_SECTIONS_PAGES]
      pages: ${n.commandPalette.sections.pages}`)),n.commandPalette.sections.social!==void 0&&(s=s.replace(/\/\/ \[CONFIG:COMMAND_PALETTE_SECTIONS_SOCIAL\]\s*social:\s*(true|false)/,`// [CONFIG:COMMAND_PALETTE_SECTIONS_SOCIAL]
      social: ${n.commandPalette.sections.social}`)),console.log("\u{1F50D} Sections replacement completed"))),n.homeOptions&&(n.homeOptions.featuredPost&&(n.homeOptions.featuredPost.enabled!==void 0&&(s=s.replace(/\/\/ \[CONFIG:HOME_OPTIONS_FEATURED_POST_ENABLED\]\s*enabled:\s*(true|false)/,`// [CONFIG:HOME_OPTIONS_FEATURED_POST_ENABLED]
      enabled: ${n.homeOptions.featuredPost.enabled}`)),n.homeOptions.featuredPost.type&&(s=s.replace(/\/\/ \[CONFIG:HOME_OPTIONS_FEATURED_POST_TYPE\]\s*type:\s*"[^"]*"/,`// [CONFIG:HOME_OPTIONS_FEATURED_POST_TYPE]
      type: "${n.homeOptions.featuredPost.type}"`))),n.homeOptions.recentPosts&&(n.homeOptions.recentPosts.enabled!==void 0&&(s=s.replace(/\/\/ \[CONFIG:HOME_OPTIONS_RECENT_POSTS_ENABLED\]\s*enabled:\s*(true|false)/,`// [CONFIG:HOME_OPTIONS_RECENT_POSTS_ENABLED]
      enabled: ${n.homeOptions.recentPosts.enabled}`)),n.homeOptions.recentPosts.count&&(s=s.replace(/\/\/ \[CONFIG:HOME_OPTIONS_RECENT_POSTS_COUNT\]\s*count:\s*\d+/,`// [CONFIG:HOME_OPTIONS_RECENT_POSTS_COUNT]
      count: ${n.homeOptions.recentPosts.count}`))),n.homeOptions.projects&&(n.homeOptions.projects.enabled!==void 0&&(s=s.replace(/\/\/ \[CONFIG:HOME_OPTIONS_PROJECTS_ENABLED\]\s*enabled:\s*(true|false)/,`// [CONFIG:HOME_OPTIONS_PROJECTS_ENABLED]
      enabled: ${n.homeOptions.projects.enabled}`)),n.homeOptions.projects.count&&(s=s.replace(/\/\/ \[CONFIG:HOME_OPTIONS_PROJECTS_COUNT\]\s*count:\s*\d+/,`// [CONFIG:HOME_OPTIONS_PROJECTS_COUNT]
      count: ${n.homeOptions.projects.count}`))),n.homeOptions.docs&&(n.homeOptions.docs.enabled!==void 0&&(s=s.replace(/\/\/ \[CONFIG:HOME_OPTIONS_DOCS_ENABLED\]\s*enabled:\s*(true|false)/,`// [CONFIG:HOME_OPTIONS_DOCS_ENABLED]
      enabled: ${n.homeOptions.docs.enabled}`)),n.homeOptions.docs.count&&(s=s.replace(/\/\/ \[CONFIG:HOME_OPTIONS_DOCS_COUNT\]\s*count:\s*\d+/,`// [CONFIG:HOME_OPTIONS_DOCS_COUNT]
      count: ${n.homeOptions.docs.count}`))),(w=n.homeOptions.blurb)!=null&&w.placement&&(s=s.replace(/\/\/ \[CONFIG:HOME_OPTIONS_BLURB_PLACEMENT\]\s*placement:\s*"[^"]*"/,`// [CONFIG:HOME_OPTIONS_BLURB_PLACEMENT]
      placement: "${n.homeOptions.blurb.placement}"`))),n.postOptions&&(n.postOptions.postsPerPage&&(s=s.replace(/\/\/ \[CONFIG:POST_OPTIONS_POSTS_PER_PAGE\]\s*postsPerPage:\s*\d+/,`// [CONFIG:POST_OPTIONS_POSTS_PER_PAGE]
    postsPerPage: ${n.postOptions.postsPerPage}`)),[{key:"readingTime",marker:"CONFIG:POST_OPTIONS_READING_TIME"},{key:"wordCount",marker:"CONFIG:POST_OPTIONS_WORD_COUNT"},{key:"tableOfContents",marker:"CONFIG:POST_OPTIONS_TABLE_OF_CONTENTS"},{key:"tags",marker:"CONFIG:POST_OPTIONS_TAGS"},{key:"postNavigation",marker:"CONFIG:POST_OPTIONS_POST_NAVIGATION"}].forEach(h=>{n.postOptions[h.key]!==void 0&&(s=s.replace(new RegExp(`// \\[${h.marker}\\]\\s*${h.key}:\\s*(true|false)`),`// [${h.marker}]
    ${h.key}: ${n.postOptions[h.key]}`))}),n.postOptions.linkedMentions&&(n.postOptions.linkedMentions.enabled!==void 0&&(s=s.replace(/\/\/ \[CONFIG:POST_OPTIONS_LINKED_MENTIONS_ENABLED\]\s*enabled:\s*(true|false)/,`// [CONFIG:POST_OPTIONS_LINKED_MENTIONS_ENABLED]
      enabled: ${n.postOptions.linkedMentions.enabled}`)),n.postOptions.linkedMentions.linkedMentionsCompact!==void 0&&(s=s.replace(/\/\/ \[CONFIG:POST_OPTIONS_LINKED_MENTIONS_COMPACT\]\s*linkedMentionsCompact:\s*(true|false)/,`// [CONFIG:POST_OPTIONS_LINKED_MENTIONS_COMPACT]
      linkedMentionsCompact: ${n.postOptions.linkedMentions.linkedMentionsCompact}`))),n.postOptions.graphView&&(n.postOptions.graphView.enabled!==void 0&&(s=s.replace(/\/\/ \[CONFIG:POST_OPTIONS_GRAPH_VIEW_ENABLED\]\s*enabled:\s*(true|false)/,`// [CONFIG:POST_OPTIONS_GRAPH_VIEW_ENABLED]
    enabled: ${n.postOptions.graphView.enabled}`)),n.postOptions.graphView.showInSidebar!==void 0&&(s=s.replace(/\/\/ \[CONFIG:POST_OPTIONS_GRAPH_VIEW_SHOW_IN_SIDEBAR\]\s*showInSidebar:\s*(true|false)/,`// [CONFIG:POST_OPTIONS_GRAPH_VIEW_SHOW_IN_SIDEBAR]
      showInSidebar: ${n.postOptions.graphView.showInSidebar}`)),n.postOptions.graphView.showInCommandPalette!==void 0&&(s=s.replace(/\/\/ \[CONFIG:POST_OPTIONS_GRAPH_VIEW_SHOW_IN_COMMAND_PALETTE\]\s*showInCommandPalette:\s*(true|false)/,`// [CONFIG:POST_OPTIONS_GRAPH_VIEW_SHOW_IN_COMMAND_PALETTE]
      showInCommandPalette: ${n.postOptions.graphView.showInCommandPalette}`)),n.postOptions.graphView.maxNodes&&(s=s.replace(/\/\/ \[CONFIG:POST_OPTIONS_GRAPH_VIEW_MAX_NODES\]\s*maxNodes:\s*\d+/,`// [CONFIG:POST_OPTIONS_GRAPH_VIEW_MAX_NODES]
      maxNodes: ${n.postOptions.graphView.maxNodes}`)),n.postOptions.graphView.showOrphanedPosts!==void 0&&(s=s.replace(/\/\/ \[CONFIG:POST_OPTIONS_GRAPH_VIEW_SHOW_ORPHANED_POSTS\]\s*showOrphanedPosts:\s*(true|false)/,`// [CONFIG:POST_OPTIONS_GRAPH_VIEW_SHOW_ORPHANED_POSTS]
      showOrphanedPosts: ${n.postOptions.graphView.showOrphanedPosts}`))),n.postOptions.showPostCardCoverImages&&(s=s.replace(/\/\/ \[CONFIG:POST_OPTIONS_SHOW_POST_CARD_COVER_IMAGES\]\s*showPostCardCoverImages:\s*"[^"]*"/,`// [CONFIG:POST_OPTIONS_SHOW_POST_CARD_COVER_IMAGES]
    showPostCardCoverImages: "${n.postOptions.showPostCardCoverImages}"`)),n.postOptions.postCardAspectRatio&&(s=s.replace(/\/\/ \[CONFIG:POST_OPTIONS_POST_CARD_ASPECT_RATIO\]\s*postCardAspectRatio:\s*"[^"]*"/,`// [CONFIG:POST_OPTIONS_POST_CARD_ASPECT_RATIO]
    postCardAspectRatio: "${n.postOptions.postCardAspectRatio}"`)),n.postOptions.customPostCardAspectRatio&&(s=s.replace(/\/\/ \[CONFIG:POST_OPTIONS_CUSTOM_POST_CARD_ASPECT_RATIO\]\s*customPostCardAspectRatio:\s*"[^"]*"/,`// [CONFIG:POST_OPTIONS_CUSTOM_POST_CARD_ASPECT_RATIO]
    customPostCardAspectRatio: "${n.postOptions.customPostCardAspectRatio}"`))),t.optionalFeatures.profilePicture.enabled&&(s=s.replace(/\/\/ \[CONFIG:PROFILE_PICTURE_ENABLED\]\s*enabled:\s*(true|false)/,`// [CONFIG:PROFILE_PICTURE_ENABLED]
    enabled: ${t.optionalFeatures.profilePicture.enabled}`),s=s.replace(/\/\/ \[CONFIG:PROFILE_PICTURE_IMAGE\]\s*image:\s*"[^"]*"/,`// [CONFIG:PROFILE_PICTURE_IMAGE]
    image: "${t.optionalFeatures.profilePicture.image}"`),s=s.replace(/\/\/ \[CONFIG:PROFILE_PICTURE_ALT\]\s*alt:\s*"[^"]*"/,`// [CONFIG:PROFILE_PICTURE_ALT]
    alt: "${t.optionalFeatures.profilePicture.alt}"`),s=s.replace(/\/\/ \[CONFIG:PROFILE_PICTURE_SIZE\]\s*size:\s*"[^"]*"/,`// [CONFIG:PROFILE_PICTURE_SIZE]
    size: "${t.optionalFeatures.profilePicture.size}"`),s=s.replace(/\/\/ \[CONFIG:PROFILE_PICTURE_URL\]\s*url:\s*"[^"]*"/,`// [CONFIG:PROFILE_PICTURE_URL]
    url: "${t.optionalFeatures.profilePicture.url||""}"`),s=s.replace(/\/\/ \[CONFIG:PROFILE_PICTURE_PLACEMENT\]\s*placement:\s*"[^"]*"/,`// [CONFIG:PROFILE_PICTURE_PLACEMENT]
    placement: "${t.optionalFeatures.profilePicture.placement}"`),s=s.replace(/\/\/ \[CONFIG:PROFILE_PICTURE_STYLE\]\s*style:\s*"[^"]*"/,`// [CONFIG:PROFILE_PICTURE_STYLE]
    style: "${t.optionalFeatures.profilePicture.style}"`)),s=s.replace(/\/\/ \[CONFIG:POST_OPTIONS_COMMENTS_ENABLED\]\s*enabled:\s*(true|false)/,`// [CONFIG:POST_OPTIONS_COMMENTS_ENABLED]
      enabled: ${t.optionalFeatures.comments.enabled}`);let N=this.validateMarkers(s);if(!N.valid)return console.error("\u274C Config modification failed: Missing markers:",N.missing),console.error("Please ensure all CONFIG markers are present in your config.ts file"),e;try{let T=(s.match(/\{/g)||[]).length,h=(s.match(/\}/g)||[]).length,D=(s.match(/\[/g)||[]).length,R=(s.match(/\]/g)||[]).length;if(T!==h)return console.error("\u274C Config modification failed: Mismatched braces"),e;if(D!==R)return console.error("\u274C Config modification failed: Mismatched brackets"),e;console.log("\u2705 Config modification complete")}catch(T){return console.error("\u274C Config validation failed:",T),e}return s}validateMarkers(o){let t=["CONFIG:THEME","CONFIG:FONT_SOURCE","CONFIG:FONT_BODY","CONFIG:FONT_HEADING","CONFIG:FONT_MONO","CONFIG:LAYOUT_CONTENT_WIDTH","CONFIG:FOOTER_ENABLED","CONFIG:FOOTER_SHOW_SOCIAL_ICONS","CONFIG:SCROLL_TO_TOP","CONFIG:DARK_MODE_TOGGLE_BUTTON","CONFIG:DEPLOYMENT_PLATFORM","CONFIG:COMMAND_PALETTE_ENABLED","CONFIG:COMMAND_PALETTE_SHORTCUT","CONFIG:COMMAND_PALETTE_PLACEHOLDER","CONFIG:COMMAND_PALETTE_SEARCH_POSTS","CONFIG:COMMAND_PALETTE_SEARCH_PAGES","CONFIG:COMMAND_PALETTE_SEARCH_PROJECTS","CONFIG:COMMAND_PALETTE_SEARCH_DOCS","CONFIG:COMMAND_PALETTE_SECTIONS_QUICK_ACTIONS","CONFIG:COMMAND_PALETTE_SECTIONS_PAGES","CONFIG:COMMAND_PALETTE_SECTIONS_SOCIAL","CONFIG:PROFILE_PICTURE_ENABLED","CONFIG:PROFILE_PICTURE_IMAGE","CONFIG:PROFILE_PICTURE_ALT","CONFIG:PROFILE_PICTURE_SIZE","CONFIG:PROFILE_PICTURE_URL","CONFIG:PROFILE_PICTURE_PLACEMENT","CONFIG:PROFILE_PICTURE_STYLE","CONFIG:NAVIGATION_SHOW_NAVIGATION","CONFIG:NAVIGATION_STYLE","CONFIG:NAVIGATION_SHOW_MOBILE_MENU","CONFIG:OPTIONAL_CONTENT_TYPES_PROJECTS","CONFIG:OPTIONAL_CONTENT_TYPES_DOCS","CONFIG:HOME_OPTIONS_FEATURED_POST_ENABLED","CONFIG:HOME_OPTIONS_FEATURED_POST_TYPE","CONFIG:HOME_OPTIONS_FEATURED_POST_SLUG","CONFIG:HOME_OPTIONS_RECENT_POSTS_ENABLED","CONFIG:HOME_OPTIONS_RECENT_POSTS_COUNT","CONFIG:HOME_OPTIONS_PROJECTS_ENABLED","CONFIG:HOME_OPTIONS_PROJECTS_COUNT","CONFIG:HOME_OPTIONS_DOCS_ENABLED","CONFIG:HOME_OPTIONS_DOCS_COUNT","CONFIG:HOME_OPTIONS_BLURB_PLACEMENT","CONFIG:POST_OPTIONS_POSTS_PER_PAGE","CONFIG:POST_OPTIONS_READING_TIME","CONFIG:POST_OPTIONS_WORD_COUNT","CONFIG:POST_OPTIONS_TABLE_OF_CONTENTS","CONFIG:POST_OPTIONS_TAGS","CONFIG:POST_OPTIONS_LINKED_MENTIONS_ENABLED","CONFIG:POST_OPTIONS_LINKED_MENTIONS_COMPACT","CONFIG:POST_OPTIONS_GRAPH_VIEW_ENABLED","CONFIG:POST_OPTIONS_GRAPH_VIEW_SHOW_IN_SIDEBAR","CONFIG:POST_OPTIONS_GRAPH_VIEW_SHOW_IN_COMMAND_PALETTE","CONFIG:POST_OPTIONS_GRAPH_VIEW_MAX_NODES","CONFIG:POST_OPTIONS_GRAPH_VIEW_SHOW_ORPHANED_POSTS","CONFIG:POST_OPTIONS_POST_NAVIGATION","CONFIG:POST_OPTIONS_SHOW_POST_CARD_COVER_IMAGES","CONFIG:POST_OPTIONS_POST_CARD_ASPECT_RATIO","CONFIG:POST_OPTIONS_CUSTOM_POST_CARD_ASPECT_RATIO","CONFIG:POST_OPTIONS_COMMENTS_ENABLED"].filter(a=>!o.includes(`// [${a}]`));return{valid:t.length===0,missing:t}}interpolateTemplate(o,e,t){console.log("\u{1F504} ConfigManager: Interpolating template variables"),console.log("\u{1F3A8} Theme:",e.currentTheme),console.log("\u{1F4DD} Font source:",e.typography.fontSource),console.log("\u{1F524} Prose font:",e.typography.proseFont),console.log("\u{1F4CB} Template name:",t);let a=o.replace(/\$\{settings\.currentTheme\}/g,e.currentTheme).replace(/\$\{settings\.typography\.fontSource\}/g,e.typography.fontSource).replace(/\$\{settings\.typography\.proseFont\}/g,e.typography.proseFont).replace(/\$\{settings\.typography\.headingFont\}/g,e.typography.headingFont).replace(/\$\{settings\.typography\.monoFont\}/g,e.typography.monoFont).replace(/\$\{settings\.typography\.customFonts\.prose\}/g,e.typography.customFonts.prose).replace(/\$\{settings\.typography\.customFonts\.heading\}/g,e.typography.customFonts.heading).replace(/\$\{settings\.typography\.customFonts\.mono\}/g,e.typography.customFonts.mono).replace(/\$\{settings\.optionalFeatures\.comments\.enabled\}/g,e.optionalFeatures.comments.enabled.toString()).replace(/\$\{settings\.optionalFeatures\.profilePicture\.enabled\}/g,e.optionalFeatures.profilePicture.enabled.toString()).replace(/\$\{settings\.optionalFeatures\.profilePicture\.image\}/g,e.optionalFeatures.profilePicture.image).replace(/\$\{settings\.optionalFeatures\.profilePicture\.alt\}/g,e.optionalFeatures.profilePicture.alt).replace(/\$\{settings\.optionalFeatures\.profilePicture\.size\}/g,e.optionalFeatures.profilePicture.size).replace(/\$\{settings\.optionalFeatures\.profilePicture\.url\}/g,e.optionalFeatures.profilePicture.url||"").replace(/\$\{settings\.optionalFeatures\.profilePicture\.placement\}/g,e.optionalFeatures.profilePicture.placement).replace(/\$\{settings\.optionalFeatures\.profilePicture\.style\}/g,e.optionalFeatures.profilePicture.style).replace(/\$\{settings\.deployment\.platform\}/g,e.deployment.platform).replace(/\$\{templateName\}/g,t);return console.log("\u2705 Template interpolation complete"),console.log("\u{1F50D} Sample of interpolated result:",a.substring(0,300)+"..."),a}getTemplateConfig(o,e){switch(o){case"standard":return{layout:{contentWidth:"45rem"},footer:{enabled:!0,showSocialIconsInFooter:!0},darkModeToggleButton:"both",commandPalette:{enabled:!0,shortcut:"ctrl+K",placeholder:"Search posts",search:{posts:!0,pages:!1,projects:!1,docs:!1},sections:{quickActions:!0,pages:!0,social:!0}},optionalContentTypes:{projects:!0,docs:!0},homeOptions:{featuredPost:{enabled:!0,type:"latest"},recentPosts:{enabled:!0,count:7},projects:{enabled:!0,count:2},docs:{enabled:!0,count:3},blurb:{placement:"below"}},postOptions:{postsPerPage:6,readingTime:!0,wordCount:!0,tableOfContents:!0,tags:!0,linkedMentions:{enabled:!0,linkedMentionsCompact:!1},graphView:{enabled:!0,showInSidebar:!0,showInCommandPalette:!0,maxNodes:100},postNavigation:!0,showPostCardCoverImages:"featured-and-posts",postCardAspectRatio:"og"},navigation:{showNavigation:!0,showMobileMenu:!0,style:"traditional"}};case"compact":return{layout:{contentWidth:"42rem"},optionalContentTypes:{projects:!1,docs:!1},footer:{showSocialIconsInFooter:!1},darkModeToggleButton:"commandPalette",commandPalette:{enabled:!0,shortcut:"ctrl+K",placeholder:"Search posts",search:{posts:!0,pages:!1,projects:!1,docs:!1},sections:{quickActions:!0,pages:!1,social:!0}},homeOptions:{featuredPost:{enabled:!1,type:"latest"},recentPosts:{enabled:!0,count:7},blurb:{placement:"below"}},postOptions:{postsPerPage:6,readingTime:!0,wordCount:!0,tableOfContents:!0,tags:!0,linkedMentions:{enabled:!0,linkedMentionsCompact:!0},graphView:{enabled:!1},postNavigation:!0,showPostCardCoverImages:"posts",postCardAspectRatio:"custom",customPostCardAspectRatio:"2.5/1"},navigation:{showNavigation:!0,showMobileMenu:!0,style:"minimal"}};case"minimal":return{layout:{contentWidth:"40rem"},optionalContentTypes:{projects:!1,docs:!1},footer:{showSocialIconsInFooter:!1},darkModeToggleButton:"commandPalette",commandPalette:{enabled:!0,shortcut:"",placeholder:"Search content",search:{posts:!0,pages:!0,projects:!1,docs:!1},sections:{quickActions:!1,pages:!1,social:!1}},homeOptions:{featuredPost:{enabled:!1,type:"latest"},recentPosts:{enabled:!0,count:7},blurb:{placement:"none"}},postOptions:{postsPerPage:6,readingTime:!1,wordCount:!1,tableOfContents:!1,tags:!1,linkedMentions:{enabled:!1,linkedMentionsCompact:!1},graphView:{enabled:!1},postNavigation:!1,showPostCardCoverImages:"none",postCardAspectRatio:"og"},navigation:{showNavigation:!1,showMobileMenu:!1,style:"minimal"}};default:return{}}}async detectAstroDevServer(){let o=this.app.vault.getAbstractFileByPath("package.json");if(o)try{let e=await this.app.vault.read(o);return e.includes("astro")&&e.includes("dev")}catch(e){return!1}return!1}async triggerRebuild(){}};var y=class{constructor(o){this.app=o}async getPluginStatus(){var a;let o=this.app.plugins,e=["astro-composer","insert-unsplash-image","obsidian-shellcommands"],t=[];for(let i of e){let r=(a=o==null?void 0:o.plugins)==null?void 0:a[i],l=(o==null?void 0:o.enabledPlugins)&&o.enabledPlugins.has(i),m=this.isPluginInstalled(i);t.push({name:this.getPluginDisplayName(i),installed:m,enabled:l,configurable:this.isPluginConfigurable(i),currentSettings:r?await this.getPluginSettings(r):void 0})}return t}isPluginInstalled(o){var a,i;let e=(a=this.app.plugins)==null?void 0:a.communityPlugins;if(e&&Array.isArray(e))return e.includes(o);let t=this.app.plugins;return!!((i=t==null?void 0:t.plugins)!=null&&i[o])}getPluginDisplayName(o){return{"astro-composer":"Astro Composer","insert-unsplash-image":"Image Inserter","obsidian-shellcommands":"Shell Commands"}[o]||o}isPluginConfigurable(o){return["astro-composer","insert-unsplash-image"].includes(o)}async getPluginSettings(o){return{}}async configurePlugins(o){try{return await this.configureObsidianSettings(o.obsidianSettings),await this.configureAstroComposerSettings(o.astroComposerSettings),await this.configureImageInserterSettings(o.imageInserterSettings),!0}catch(e){return!1}}async configureObsidianSettings(o){let e=this.app.vault.config;o.attachmentLocation==="subfolder"?(e.newLinkFormat="relative",e.attachmentFolderPath=`./${o.subfolderName}`):(e.newLinkFormat="relative",e.attachmentFolderPath=""),await this.app.vault.saveConfig()}async configureAstroComposerSettings(o){}async configureImageInserterSettings(o){}async getManualConfigurationInstructions(o){let e=`# Manual Configuration Instructions

`;return e+=`## Obsidian Settings
`,e+=`1. Go to **Settings \u2192 Files & Links**
`,e+="2. Set **Default location for new attachments** to: ",e+=o.obsidianSettings.attachmentLocation==="subfolder"?'"In subfolder under current folder"':'"Same folder as current file"',e+=`
`,o.obsidianSettings.attachmentLocation==="subfolder"&&(e+=`3. Set **Subfolder name** to: "${o.obsidianSettings.subfolderName}"
`),e+=`
`,e+=`## Astro Composer Plugin
`,e+=`1. Go to **Settings \u2192 Community plugins \u2192 Astro Composer**
`,e+=`2. Set **Creation mode** to: "${o.astroComposerSettings.creationMode}"
`,o.astroComposerSettings.creationMode==="folder-based"&&(e+=`3. Set **Index file name** to: "${o.astroComposerSettings.indexFileName}"
`),e+=`
`,e+=`## Image Inserter Plugin
`,e+=`1. Go to **Settings \u2192 Community plugins \u2192 Image Inserter**
`,e+=`2. Set **Insert to Frontmatter Value Format** to: "${o.imageInserterSettings.insertFormat}"
`,e}};var O=class extends E.Modal{constructor(e,t,a){super(e);this.currentStep=1;this.totalSteps=9;this.selectedFeatures={};this.settings=t,this.configManager=new P(e),this.pluginManager=new y(e),this.onComplete=a,this.initializeFromSettings()}onOpen(){let{contentEl:e}=this;e.empty(),e.addClass("astro-modular-wizard"),this.renderCurrentStep()}onClose(){let{contentEl:e}=this;e.empty()}initializeFromSettings(){var e;this.selectedTemplate=this.settings.currentTemplate||"standard",this.selectedTheme=this.settings.currentTheme||"oxygen",this.selectedContentOrg=this.settings.contentOrganization||"file-based",this.selectedFeatures={...this.settings.features},this.selectedTypography={...this.settings.typography},this.selectedOptionalFeatures={...this.settings.optionalFeatures},this.selectedDeployment=((e=this.settings.deployment)==null?void 0:e.platform)||"netlify",this.runWizardOnStartup=this.settings.runWizardOnStartup!==void 0?this.settings.runWizardOnStartup:!0}renderCurrentStep(){let{contentEl:e}=this;e.empty(),e.scrollTop=0;let t=e.createDiv("wizard-header"),a=Math.max(this.currentStep/this.totalSteps*100,5);t.innerHTML=`
			<h1>Astro Modular Setup</h1>
			<div class="wizard-progress">
				<div class="progress-bar">
					<div class="progress-fill"></div>
				</div>
				<span class="progress-text">Step ${this.currentStep} of ${this.totalSteps}</span>
			</div>
		`;let i=t.querySelector(".progress-fill"),r=t.querySelector(".progress-bar");i&&r&&(i.style.width=`${a}%`,i.style.setProperty("background","var(--interactive-accent)","important"),i.style.setProperty("height","12px","important"),i.style.setProperty("border-radius","4px","important"),i.style.setProperty("display","block","important"),i.style.setProperty("min-height","12px","important"),i.style.setProperty("margin","0","important"),i.style.setProperty("padding","0","important"),i.style.setProperty("position","absolute","important"),i.style.setProperty("top","0","important"),i.style.setProperty("left","0","important"));let l=e.createDiv("wizard-content");this.renderStepContent(l);let m=e.createDiv("wizard-footer");this.renderStepFooter(m)}renderStepContent(e){switch(this.currentStep){case 1:this.renderWelcomeStep(e);break;case 2:this.renderTemplateStep(e);break;case 3:this.renderThemeStep(e);break;case 4:this.renderFontStep(e);break;case 5:this.renderContentOrgStep(e);break;case 6:this.renderOptionalFeaturesStep(e);break;case 7:this.renderDeploymentStep(e);break;case 8:this.renderPluginConfigStep(e);break;case 9:this.renderFinalizeStep(e);break}}renderWelcomeStep(e){e.innerHTML=`
			<div class="welcome-content">
				<h2>Welcome to Astro Modular!</h2>
				<p>This wizard will help you set up your Astro Modular theme with the perfect configuration for your needs.</p>
				<p class="welcome-note">
					<a href="https://github.com/astro-modular/docs" target="_blank">View documentation</a>
				</p>
			</div>
		`}renderTemplateStep(e){e.innerHTML=`
			<div class="template-selection">
				<h2>Choose your preset</h2>
				<p>Select a preset that best fits your content type and goals.</p>
				<div class="template-options">
					${S.map(t=>`
						<div class="template-option ${this.selectedTemplate===t.id?"selected":""}" 
							 data-template="${t.id}">
							<div class="template-header">
								<h3>${t.name}</h3>
								${t.recommended?'<span class="recommended">Default</span>':""}
							</div>
							<p class="template-description">${t.description}</p>
							<div class="template-features">
								${t.features.map(a=>`<span class="feature-tag">${a}</span>`).join("")}
							</div>
						</div>
					`).join("")}
				</div>
			</div>
		`,e.querySelectorAll(".template-option").forEach(t=>{t.addEventListener("click",()=>{let a=t.getAttribute("data-template");if(a){if(this.selectedTemplate=a,a==="custom"){let i="../../../config.ts";this.app.vault.getAbstractFileByPath(i)?this.app.workspace.openLinkText("",i):(this.app.vault.create(i,`// Astro Modular Configuration
// Customize your settings here

export const siteConfig = {
  // Add your configuration here
};
`),this.app.workspace.openLinkText("",i)),new E.Notice("Opening config.ts for custom configuration"),this.close();return}this.renderCurrentStep()}})})}renderThemeStep(e){e.innerHTML=`
			<div class="theme-selection">
				<h2>Choose your theme</h2>
				<p>Select a color scheme that matches your style and content.</p>
				<div class="theme-options">
					${C.map(t=>`
						<div class="theme-option ${this.selectedTheme===t.id?"selected":""}" 
							 data-theme="${t.id}">
							<div class="theme-preview" style="background: linear-gradient(135deg, ${t.previewColors.join(", ")});">
								<div class="theme-preview-content">
									<div class="preview-text">Sample Text</div>
									<div class="preview-accent">Accent</div>
								</div>
							</div>
							<div class="theme-info">
								<h3>${t.name}</h3>
								<p>${t.description}</p>
							</div>
						</div>
					`).join("")}
				</div>
			</div>
		`,e.querySelectorAll(".theme-option").forEach(t=>{t.addEventListener("click",()=>{let a=t.getAttribute("data-theme");a&&(this.selectedTheme=a,this.renderCurrentStep())})})}renderContentOrgStep(e){e.innerHTML=`
			<div class="content-org-selection">
				<h2>Content organization</h2>
				<p>Choose how you want to organize your content and assets.</p>
				<div class="org-options">
					<div class="org-option ${this.selectedContentOrg==="file-based"?"selected":""}" 
						 data-org="file-based">
						<div class="org-header">
							<h3>File-based</h3>
							<span class="default-badge">Default</span>
						</div>
						<p>Single markdown files with images in attachments subfolder</p>
						<div class="org-example">
							<pre><code>posts/
\u251C\u2500\u2500 my-post.md
\u2514\u2500\u2500 attachments/
    \u2514\u2500\u2500 image.jpg</code></pre>
						</div>
					</div>
					<div class="org-option ${this.selectedContentOrg==="folder-based"?"selected":""}" 
						 data-org="folder-based">
						<div class="org-header">
							<h3>Folder-based</h3>
						</div>
						<p>Each post gets its own folder with co-located assets</p>
						<div class="org-example">
							<pre><code>posts/
\u251C\u2500\u2500 my-post/
\u2502   \u251C\u2500\u2500 index.md
\u2502   \u2514\u2500\u2500 image.jpg
\u2514\u2500\u2500 another-post/
    \u251C\u2500\u2500 index.md
    \u2514\u2500\u2500 image.jpg</code></pre>
						</div>
					</div>
				</div>
			</div>
		`,e.querySelectorAll(".org-option").forEach(t=>{t.addEventListener("click",()=>{let a=t.getAttribute("data-org");a&&(this.selectedContentOrg=a,this.renderCurrentStep())})})}renderFontStep(e){var t,a,i,r,l,m,u;e.innerHTML=`
			<div class="font-selection">
				<h2>Choose your fonts</h2>
				<p>Select fonts for headings, body text, and code.</p>
				<div class="font-options">
					<div class="font-setting">
						<label>Heading Font</label>
						<select id="heading-font">
							${_.map(c=>`<option value="${c}" ${this.selectedTypography.headingFont===c?"selected":""}>${c}</option>`).join("")}
						</select>
					</div>
					<div class="font-setting">
						<label>Body Font</label>
						<select id="prose-font">
							${_.map(c=>`<option value="${c}" ${this.selectedTypography.proseFont===c?"selected":""}>${c}</option>`).join("")}
						</select>
					</div>
					<div class="font-setting">
						<label>Monospace Font</label>
						<select id="mono-font">
							${_.map(c=>`<option value="${c}" ${this.selectedTypography.monoFont===c?"selected":""}>${c}</option>`).join("")}
						</select>
					</div>
					<div class="font-setting">
						<label>Font Source</label>
						<select id="font-source">
							<option value="local" ${this.selectedTypography.fontSource==="local"?"selected":""}>Local (Google Fonts)</option>
							<option value="cdn" ${this.selectedTypography.fontSource==="cdn"?"selected":""}>CDN (Custom)</option>
						</select>
					</div>
					${this.selectedTypography.fontSource==="cdn"?`
						<div class="font-setting">
							<label>Custom Font URLs (comma-separated)</label>
							<input type="text" id="custom-fonts" placeholder="https://fonts.googleapis.com/css2?family=Custom+Font:wght@400;600&display=swap">
						</div>
						<div class="font-setting">
							<label>Heading Font Name</label>
							<input type="text" id="custom-heading-font" value="${this.selectedTypography.customFonts.heading}" placeholder="Custom Heading Font">
						</div>
						<div class="font-setting">
							<label>Body Font Name</label>
							<input type="text" id="custom-prose-font" value="${this.selectedTypography.customFonts.prose}" placeholder="Custom Body Font">
						</div>
						<div class="font-setting">
							<label>Monospace Font Name</label>
							<input type="text" id="custom-mono-font" value="${this.selectedTypography.customFonts.mono}" placeholder="Custom Monospace Font">
						</div>
					`:""}
				</div>
			</div>
		`,(t=e.querySelector("#heading-font"))==null||t.addEventListener("change",c=>{this.selectedTypography.headingFont=c.target.value}),(a=e.querySelector("#prose-font"))==null||a.addEventListener("change",c=>{this.selectedTypography.proseFont=c.target.value}),(i=e.querySelector("#mono-font"))==null||i.addEventListener("change",c=>{this.selectedTypography.monoFont=c.target.value}),(r=e.querySelector("#font-source"))==null||r.addEventListener("change",c=>{this.selectedTypography.fontSource=c.target.value,this.renderCurrentStep()}),(l=e.querySelector("#custom-heading-font"))==null||l.addEventListener("input",c=>{this.selectedTypography.customFonts.heading=c.target.value}),(m=e.querySelector("#custom-prose-font"))==null||m.addEventListener("input",c=>{this.selectedTypography.customFonts.prose=c.target.value}),(u=e.querySelector("#custom-mono-font"))==null||u.addEventListener("input",c=>{this.selectedTypography.customFonts.mono=c.target.value})}renderOptionalFeaturesStep(e){var t,a,i,r,l,m,u,c;e.innerHTML=`
			<div class="optional-features">
				<h2>Optional features</h2>
				<p>Configure additional features for your site.</p>
				
				<div class="features-grid">
					<div class="feature-card">
						<div class="feature-header">
							<label class="feature-toggle">
								<input type="checkbox" ${this.selectedOptionalFeatures.profilePicture.enabled?"checked":""} id="profile-picture-enabled">
								<span class="toggle-slider"></span>
								<span class="feature-label">Profile Picture</span>
							</label>
						</div>
						<div class="feature-details" id="profile-picture-details" style="display: ${this.selectedOptionalFeatures.profilePicture.enabled?"block":"none"};">
							<div class="settings-grid">
								<div class="setting-group">
									<label>Image Path (within /public folder)</label>
									<input type="text" id="profile-image" value="${this.selectedOptionalFeatures.profilePicture.image}" placeholder="/profile.jpg">
								</div>
								<div class="setting-group">
									<label>Alt Text</label>
									<input type="text" id="profile-alt" value="${this.selectedOptionalFeatures.profilePicture.alt}" placeholder="Profile picture">
								</div>
								<div class="setting-group">
									<label>Size</label>
									<select id="profile-size">
										<option value="sm" ${this.selectedOptionalFeatures.profilePicture.size==="sm"?"selected":""}>Small (32px)</option>
										<option value="md" ${this.selectedOptionalFeatures.profilePicture.size==="md"?"selected":""}>Medium (48px)</option>
										<option value="lg" ${this.selectedOptionalFeatures.profilePicture.size==="lg"?"selected":""}>Large (64px)</option>
									</select>
								</div>
								<div class="setting-group">
									<label>URL (optional)</label>
									<input type="text" id="profile-url" value="${this.selectedOptionalFeatures.profilePicture.url}" placeholder="/about">
								</div>
								<div class="setting-group">
									<label>Placement</label>
									<select id="profile-placement">
										<option value="footer" ${this.selectedOptionalFeatures.profilePicture.placement==="footer"?"selected":""}>Footer</option>
										<option value="header" ${this.selectedOptionalFeatures.profilePicture.placement==="header"?"selected":""}>Header</option>
									</select>
								</div>
								<div class="setting-group">
									<label>Style</label>
									<select id="profile-style">
										<option value="circle" ${this.selectedOptionalFeatures.profilePicture.style==="circle"?"selected":""}>Circle</option>
										<option value="square" ${this.selectedOptionalFeatures.profilePicture.style==="square"?"selected":""}>Square</option>
										<option value="none" ${this.selectedOptionalFeatures.profilePicture.style==="none"?"selected":""}>None</option>
									</select>
								</div>
							</div>
						</div>
					</div>
					
					<div class="feature-card">
						<div class="feature-header">
							<label class="feature-toggle">
								<input type="checkbox" ${this.selectedOptionalFeatures.comments.enabled?"checked":""} id="comments-enabled">
								<span class="toggle-slider"></span>
								<span class="feature-label">Comments (Giscus)</span>
							</label>
						</div>
						<div class="feature-details" id="comments-details" style="display: ${this.selectedOptionalFeatures.comments.enabled?"block":"none"};">
							<div class="feature-note">
								<p>Comments require GitHub repository setup. See the <a href="https://github.com/astro-modular/docs" target="_blank">documentation</a> for detailed setup instructions.</p>
							</div>
							<div style="height: 1rem;"></div>
						</div>
					</div>
				</div>
			</div>
		`,(t=e.querySelector("#profile-picture-enabled"))==null||t.addEventListener("change",d=>{this.selectedOptionalFeatures.profilePicture.enabled=d.target.checked;let n=e.querySelector("#profile-picture-details");n.style.display=this.selectedOptionalFeatures.profilePicture.enabled?"block":"none"}),(a=e.querySelector("#comments-enabled"))==null||a.addEventListener("change",d=>{this.selectedOptionalFeatures.comments.enabled=d.target.checked;let n=e.querySelector("#comments-details");n.style.display=this.selectedOptionalFeatures.comments.enabled?"block":"none"}),(i=e.querySelector("#profile-image"))==null||i.addEventListener("change",d=>{this.selectedOptionalFeatures.profilePicture.image=d.target.value}),(r=e.querySelector("#profile-alt"))==null||r.addEventListener("change",d=>{this.selectedOptionalFeatures.profilePicture.alt=d.target.value}),(l=e.querySelector("#profile-size"))==null||l.addEventListener("change",d=>{this.selectedOptionalFeatures.profilePicture.size=d.target.value}),(m=e.querySelector("#profile-url"))==null||m.addEventListener("change",d=>{this.selectedOptionalFeatures.profilePicture.url=d.target.value}),(u=e.querySelector("#profile-placement"))==null||u.addEventListener("change",d=>{this.selectedOptionalFeatures.profilePicture.placement=d.target.value}),(c=e.querySelector("#profile-style"))==null||c.addEventListener("change",d=>{this.selectedOptionalFeatures.profilePicture.style=d.target.value})}renderDeploymentStep(e){e.innerHTML=`
			<div class="deployment-selection">
				<h2>Deployment platform</h2>
				<p>Choose your deployment platform for automatic configuration file generation.</p>
				<div class="deployment-options">
					<div class="deployment-option ${this.selectedDeployment==="netlify"?"selected":""}" data-platform="netlify">
						<div class="deployment-header">
							<h3>Netlify</h3>
							<span class="default-badge">Default</span>
						</div>
						<p>Generates netlify.toml with redirects and build settings</p>
					</div>
					<div class="deployment-option ${this.selectedDeployment==="vercel"?"selected":""}" data-platform="vercel">
						<div class="deployment-header">
							<h3>Vercel</h3>
						</div>
						<p>Generates vercel.json with redirects and cache headers</p>
					</div>
					<div class="deployment-option ${this.selectedDeployment==="github-pages"?"selected":""}" data-platform="github-pages">
						<div class="deployment-header">
							<h3>GitHub Pages</h3>
						</div>
						<p>Generates public/redirects.txt for GitHub Pages redirects</p>
					</div>
				</div>
			</div>
		`,e.querySelectorAll(".deployment-option").forEach(t=>{t.addEventListener("click",()=>{let a=t.getAttribute("data-platform");a&&(this.selectedDeployment=a,this.renderCurrentStep())})})}renderFeaturesStep(e){if(this.selectedTemplate!=="custom"){this.currentStep++,this.renderCurrentStep();return}e.innerHTML=`
			<div class="features-selection">
				<h2>Configure features</h2>
				<p>Choose which features you want to enable for your site.</p>
				<div class="features-list">
					${Object.entries({commandPalette:"Command palette",tableOfContents:"Table of contents",readingTime:"Reading time",linkedMentions:"Linked mentions",comments:"Comments"}).map(([t,a])=>`
						<div class="feature-setting">
							<label class="feature-toggle">
								<input type="checkbox" ${this.selectedFeatures[t]?"checked":""} data-feature="${t}">
								<span class="toggle-slider"></span>
								<span class="feature-label">${a}</span>
							</label>
						</div>
					`).join("")}
				</div>
			</div>
		`,e.querySelectorAll('input[type="checkbox"]').forEach(t=>{t.addEventListener("change",a=>{let i=a.target,r=i.dataset.feature;r&&(this.selectedFeatures[r]=i.checked)})})}async renderPluginConfigStep(e){var a,i;let t=await this.pluginManager.getPluginStatus();e.innerHTML=`
			<div class="plugin-config">
				<h2>Plugin configuration</h2>
				<p>We'll automatically configure your plugins based on your choices.</p>
				<div class="plugin-status">
					${t.map(r=>`
						<div class="plugin-item ${r.installed?"installed":"missing"}">
							<div class="plugin-icon">${r.installed?"\u2705":"\u274C"}</div>
							<div class="plugin-info">
								<h3>${r.name}</h3>
								<p>${r.installed?"Ready to configure":"Not installed"}</p>
							</div>
						</div>
					`).join("")}
				</div>
				<div class="config-options">
					<button class="config-button primary" id="auto-configure">Configure automatically</button>
					<button class="config-button secondary" id="manual-configure">Show manual instructions</button>
				</div>
			</div>
		`,(a=e.querySelector("#auto-configure"))==null||a.addEventListener("click",()=>{this.configurePlugins()}),(i=e.querySelector("#manual-configure"))==null||i.addEventListener("click",()=>{this.showManualInstructions()})}renderFinalizeStep(e){var t,a,i;e.innerHTML=`
			<div class="finalize-step">
				<h2>Almost done!</h2>
				<p>Review your configuration and complete the setup.</p>
				<div class="config-summary">
					<div class="summary-item">
						<strong>Preset:</strong> ${(t=S.find(r=>r.id===this.selectedTemplate))==null?void 0:t.name}
					</div>
					<div class="summary-item">
						<strong>Theme:</strong> ${(a=C.find(r=>r.id===this.selectedTheme))==null?void 0:a.name}
					</div>
					<div class="summary-item">
						<strong>Organization:</strong> ${this.selectedContentOrg==="file-based"?"File-based":"Folder-based"}
					</div>
				</div>
				<div class="finalize-options">
					<label class="checkbox-option">
						<input type="checkbox" ${this.runWizardOnStartup?"checked":""} id="run-on-startup">
						<span>Run wizard on startup</span>
					</label>
				</div>
			</div>
		`,(i=e.querySelector("#run-on-startup"))==null||i.addEventListener("change",r=>{this.runWizardOnStartup=r.target.checked})}renderStepFooter(e){let t=e.createDiv("wizard-buttons");this.currentStep>1&&t.createEl("button",{text:"Previous",cls:"wizard-button secondary"}).addEventListener("click",()=>{this.currentStep--,this.renderCurrentStep()}),t.createEl("button",{text:this.currentStep===this.totalSteps?"Complete Setup":"Next",cls:"wizard-button primary"}).addEventListener("click",()=>{this.currentStep===this.totalSteps?this.completeSetup():(this.currentStep++,this.renderCurrentStep())}),this.currentStep<this.totalSteps&&this.currentStep>1&&t.createEl("button",{text:"Skip",cls:"wizard-button tertiary"}).addEventListener("click",()=>{this.applyDefaultValues(),this.currentStep++,this.renderCurrentStep()})}applyDefaultValues(){var e;switch(this.currentStep){case 4:this.selectedTypography={...this.settings.typography};break;case 5:this.selectedContentOrg=this.settings.contentOrganization||"file-based";break;case 6:this.selectedOptionalFeatures={...this.settings.optionalFeatures};break;case 7:this.selectedDeployment=((e=this.settings.deployment)==null?void 0:e.platform)||"netlify";break}}async configurePlugins(){let e={obsidianSettings:{attachmentLocation:this.selectedContentOrg==="file-based"?"subfolder":"same-folder",subfolderName:"attachments"},astroComposerSettings:{creationMode:this.selectedContentOrg,indexFileName:"index"},imageInserterSettings:{insertFormat:this.selectedContentOrg==="file-based"?"[[attachments/{image-url}]]":"[[{image-url}]]"}};return await this.pluginManager.configurePlugins(e)}async showManualInstructions(){let e={obsidianSettings:{attachmentLocation:this.selectedContentOrg==="file-based"?"subfolder":"same-folder",subfolderName:"attachments"},astroComposerSettings:{creationMode:this.selectedContentOrg,indexFileName:"index"},imageInserterSettings:{insertFormat:this.selectedContentOrg==="file-based"?"[[attachments/{image-url}]]":"[[{image-url}]]"}},t=await this.pluginManager.getManualConfigurationInstructions(e),a=new E.Modal(this.app),i=t.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/^### (.*$)/gim,"<h3>$1</h3>").replace(/^## (.*$)/gim,"<h2>$1</h2>").replace(/^# (.*$)/gim,"<h1>$1</h1>").replace(/^\d+\. (.*$)/gim,"<li>$1</li>").replace(/^- (.*$)/gim,"<li>$1</li>").replace(/\n\n/g,"</p><p>").replace(/^(.*)$/gim,"<p>$1</p>").replace(/<p><\/p>/g,"").replace(/<p>(<h[1-6]>.*<\/h[1-6]>)<\/p>/g,"$1").replace(/<p>(<li>.*<\/li>)<\/p>/g,"<ul>$1</ul>").replace(/<\/ul><ul>/g,"").replace(/<p>(<strong>.*<\/strong>)<\/p>/g,"$1").replace(/<p>(<em>.*<\/em>)<\/p>/g,"$1");a.contentEl.innerHTML=`
			<div style="padding: 15px; line-height: 1.5; max-height: 75vh; overflow-y: auto;">
				${i}
			</div>
		`,a.open()}async completeSetup(){console.log("\u{1F3AF} SetupWizard: Starting completion process"),console.log("\u{1F4CB} Selected template:",this.selectedTemplate),console.log("\u{1F3A8} Selected theme:",this.selectedTheme),console.log("\u{1F4C1} Selected content org:",this.selectedContentOrg),this.settings.currentTemplate=this.selectedTemplate,this.settings.currentTheme=this.selectedTheme,this.settings.contentOrganization=this.selectedContentOrg,this.settings.runWizardOnStartup=this.runWizardOnStartup,this.settings.typography=this.selectedTypography,this.settings.optionalFeatures=this.selectedOptionalFeatures,this.settings.deployment={platform:this.selectedDeployment},console.log("\u{1F4BE} Settings updated, calling config manager...");let e=await this.configManager.applyPreset({name:this.selectedTemplate,description:"",features:this.selectedFeatures,theme:this.selectedTheme,contentOrganization:this.selectedContentOrg,config:this.settings});console.log("\u{1F527} Config manager result:",e),await this.configManager.triggerRebuild();let t=await this.configurePlugins();this.onComplete(this.settings),this.close();let a=t?"Astro Modular setup complete! Configuration saved and plugins configured successfully. Your site is ready to go!":"Astro Modular setup complete! Configuration saved. Some plugins may need manual configuration - check the documentation for details.";new E.Notice(a,8e3)}};function L(g,o){g.addCommand({id:"open-settings",name:"Open Astro Modular Settings",callback:()=>{g.openSettings()}}),g.addCommand({id:"run-setup-wizard",name:"Run Setup Wizard",callback:()=>{new O(g.app,o,async t=>{o=t,await g.saveData(o)}).open()}}),g.addCommand({id:"open-config",name:"Open config.ts",callback:async()=>{g.app.vault.getAbstractFileByPath("astro.config.ts")?await g.app.workspace.openLinkText("","astro.config.ts"):new v.Notice("Config file not found. Make sure you have an Astro project in this vault.")}}),g.addCommand({id:"apply-configuration",name:"Apply Current Configuration",callback:async()=>{new v.Notice("Configuration applied successfully!")}}),g.addCommand({id:"toggle-wizard-startup",name:"Toggle Wizard on Startup",callback:async()=>{o.runWizardOnStartup=!o.runWizardOnStartup,await g.saveData(o),new v.Notice(`Wizard on startup ${o.runWizardOnStartup?"enabled":"disabled"}`)}})}var p=require("obsidian");var b=class extends p.PluginSettingTab{constructor(e,t,a){super(e,t);this.plugin=t,this.settings=a,this.configManager=new P(e),this.pluginManager=new y(e)}display(){let{containerEl:e}=this;e.empty(),e.addClass("astro-modular-settings");let t=e.createDiv("tab-container"),a=t.createDiv("tab-nav"),i=t.createDiv("tab-content"),r=[{id:"general",name:"General",description:"Basic settings and configuration overview",render:()=>this.renderGeneralTab(i)},{id:"quick-config",name:"Quick Config",description:"Fast template and theme changes",render:()=>this.renderQuickConfigTab(i)},{id:"features",name:"Features",description:"Enable or disable theme features",render:()=>this.renderFeaturesTab(i)},{id:"plugin-settings",name:"Plugin Settings",description:"Manage Obsidian plugin configurations",render:()=>this.renderPluginTab(i)},{id:"advanced",name:"Advanced",description:"Advanced options and utilities",render:()=>this.renderAdvancedTab(i)}];r.forEach((l,m)=>{let u=a.createEl("button",{text:l.name,cls:`tab-button ${m===0?"active":""}`});u.title=l.description,u.addEventListener("click",()=>{a.querySelectorAll(".tab-button").forEach(c=>c.classList.remove("active")),u.classList.add("active"),i.style.opacity="0",setTimeout(()=>{i.empty(),l.render(),i.style.opacity="1"},150)})}),r[0].render()}renderGeneralTab(e){var n,s;e.empty();let t=e.createDiv("settings-section"),a=t.createEl("h2",{text:"General Settings"}),i=t.createEl("p",{text:"Configure basic plugin behavior and view current status."});new p.Setting(e).setName("Run wizard on startup").setDesc("Show the setup wizard when Obsidian starts (if not disabled)").addToggle(f=>f.setValue(this.settings.runWizardOnStartup).onChange(async N=>{this.settings.runWizardOnStartup=N,await this.plugin.saveData(this.settings)}));let l=e.createDiv("config-display").createDiv("config-info"),m=l.createEl("h3",{text:"Current Configuration"}),u=l.createDiv("config-item");u.createEl("strong",{text:"Template: "}),u.createSpan({text:((n=S.find(f=>f.id===this.settings.currentTemplate))==null?void 0:n.name)||"Unknown"});let c=l.createDiv("config-item");c.createEl("strong",{text:"Theme: "}),c.createSpan({text:((s=C.find(f=>f.id===this.settings.currentTheme))==null?void 0:s.name)||"Unknown"});let d=l.createDiv("config-item");d.createEl("strong",{text:"Organization: "}),d.createSpan({text:this.settings.contentOrganization==="file-based"?"File-based":"Folder-based"}),new p.Setting(e).setName("Setup wizard").setDesc("Run the setup wizard to reconfigure your theme").addButton(f=>f.setButtonText("Run Setup Wizard").setCta().onClick(()=>{new O(this.app,this.settings,async I=>{this.settings=I,await this.plugin.saveData(this.settings)}).open()}))}renderQuickConfigTab(e){e.empty();let t=e.createDiv("settings-section"),a=t.createEl("h2",{text:"Quick Configuration"}),i=t.createEl("p",{text:"Quickly change your template, theme, and content organization."});new p.Setting(e).setName("Template").setDesc("Choose your content template").addDropdown(r=>{S.forEach(l=>{r.addOption(l.id,l.name)}),r.setValue(this.settings.currentTemplate),r.onChange(async l=>{this.settings.currentTemplate=l,await this.plugin.saveData(this.settings)})}),new p.Setting(e).setName("Theme").setDesc("Choose your color theme").addDropdown(r=>{C.forEach(l=>{r.addOption(l.id,l.name)}),r.setValue(this.settings.currentTheme),r.onChange(async l=>{this.settings.currentTheme=l,await this.plugin.saveData(this.settings)})}),new p.Setting(e).setName("Content organization").setDesc("Choose how to organize your content and assets").addDropdown(r=>{r.addOption("file-based","File-based"),r.addOption("folder-based","Folder-based"),r.setValue(this.settings.contentOrganization),r.onChange(async l=>{this.settings.contentOrganization=l,await this.plugin.saveData(this.settings)})}),new p.Setting(e).setName("Apply configuration").setDesc("Apply the current settings to your Astro configuration").addButton(r=>r.setButtonText("Apply Configuration").setCta().onClick(async()=>{await this.applyCurrentConfiguration()})),new p.Setting(e).setName("Edit config.ts directly").setDesc("Open your Astro configuration file in the editor").addButton(r=>r.setButtonText("Open config.ts").onClick(async()=>{await this.openConfigFile()}))}renderFeaturesTab(e){e.empty();let t=e.createDiv("settings-section"),a=t.createEl("h2",{text:"Feature Configuration"}),i=t.createEl("p",{text:"Enable or disable specific features for your site."});[{key:"commandPalette",name:"Command palette",desc:"Add a command palette to your site"},{key:"tableOfContents",name:"Table of contents",desc:"Show table of contents on pages"},{key:"readingTime",name:"Reading time",desc:"Display estimated reading time"},{key:"linkedMentions",name:"Linked mentions",desc:"Show linked mentions and backlinks"},{key:"comments",name:"Comments",desc:"Enable comment system"},{key:"graphView",name:"Graph view",desc:"Show graph view of post connections"},{key:"postNavigation",name:"Post navigation",desc:"Show next/previous post navigation"},{key:"scrollToTop",name:"Scroll to top",desc:"Show scroll to top button"},{key:"showSocialIconsInFooter",name:"Social icons in footer",desc:"Show social icons in footer"}].forEach(l=>{let m=l.key,u=this.settings.features[m],c=typeof u=="boolean"?u:!1;new p.Setting(e).setName(l.name).setDesc(l.desc).addToggle(d=>d.setValue(c).onChange(async n=>{this.settings.features[m]=n,await this.plugin.saveData(this.settings)}))}),new p.Setting(e).setName("Save configuration").setDesc("Save your feature settings to the configuration file").addButton(l=>l.setButtonText("Save Configuration").setCta().onClick(async()=>{await this.applyCurrentConfiguration()}))}async renderPluginTab(e){e.empty();let t=e.createDiv("settings-section"),a=t.createEl("h2",{text:"Plugin Configuration"}),i=t.createEl("p",{text:"Manage your Obsidian plugins and their settings."}),r=await this.pluginManager.getPluginStatus(),m=e.createDiv("plugin-status-container").createDiv("plugin-status");for(let u of r){let c=m.createDiv(`plugin-item ${u.installed?"installed":"missing"}`),d=c.createDiv("plugin-icon");d.textContent=u.installed?"\u2705":"\u274C";let n=c.createDiv("plugin-info");n.createEl("h3",{text:u.name});let s=u.installed?u.enabled?"Enabled":"Disabled":"Not installed";n.createEl("p",{text:s})}new p.Setting(e).setName("Configure automatically").setDesc("Automatically configure all installed plugins").addButton(u=>u.setButtonText("Configure Automatically").setCta().onClick(async()=>{await this.pluginManager.configurePlugins(this.settings.pluginConfig)?new p.Notice("Plugins configured successfully!"):new p.Notice("Some plugins could not be configured automatically.")})),new p.Setting(e).setName("Show manual instructions").setDesc("Get step-by-step instructions for manual configuration").addButton(u=>u.setButtonText("Show Manual Instructions").onClick(async()=>{let c=await this.pluginManager.getManualConfigurationInstructions(this.settings.pluginConfig),d=new p.Modal(this.app);d.titleEl.setText("Manual Configuration Instructions");let n=d.contentEl.createEl("pre");n.textContent=c,d.open()}))}renderAdvancedTab(e){e.empty();let t=e.createDiv("settings-section"),a=t.createEl("h2",{text:"Advanced Settings"}),i=t.createEl("p",{text:"Advanced configuration options and utilities."});new p.Setting(e).setName("Open config.ts in editor").setDesc("Open your Astro configuration file in the editor").addButton(r=>r.setButtonText("Open config.ts").onClick(async()=>{await this.openConfigFile()})),new p.Setting(e).setName("Reset to defaults").setDesc("Reset all settings to their default values").addButton(r=>r.setButtonText("Reset to Defaults").setWarning().onClick(async()=>{confirm("Are you sure you want to reset all settings to defaults?")&&new p.Notice("Settings reset to defaults")})),new p.Setting(e).setName("Export configuration").setDesc("Export your current configuration as JSON").addButton(r=>r.setButtonText("Export JSON").onClick(()=>{this.exportConfiguration()})),new p.Setting(e).setName("Import configuration").setDesc("Import configuration from JSON file").addButton(r=>r.setButtonText("Import JSON").onClick(()=>{this.importConfiguration()}))}async applyCurrentConfiguration(){try{await this.configManager.applyPreset({name:this.settings.currentTemplate,description:"",features:this.settings.features,theme:this.settings.currentTheme,contentOrganization:this.settings.contentOrganization,config:this.settings})?(new p.Notice("Configuration applied successfully!"),await this.configManager.triggerRebuild()):new p.Notice("Failed to apply configuration. Check the console for errors.")}catch(e){new p.Notice(`Error applying configuration: ${e.message}`)}}async openConfigFile(){this.app.vault.getAbstractFileByPath("astro.config.ts")?await this.app.workspace.openLinkText("","astro.config.ts"):new p.Notice("Config file not found. Make sure you have an Astro project in this vault.")}exportConfiguration(){let e=JSON.stringify(this.settings,null,2),t=new Blob([e],{type:"application/json"}),a=URL.createObjectURL(t),i=document.createElement("a");i.href=a,i.download="astro-modular-config.json",document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(a),new p.Notice("Configuration exported successfully!")}importConfiguration(){let e=document.createElement("input");e.type="file",e.accept=".json",e.onchange=async t=>{var i;let a=(i=t.target.files)==null?void 0:i[0];if(a)try{let r=await a.text(),l=JSON.parse(r);this.settings={...this.settings,...l},await this.plugin.saveData(this.settings),this.display(),new p.Notice("Configuration imported successfully!")}catch(r){new p.Notice("Failed to import configuration. Please check the file format.")}},e.click()}};var F=class extends G.Plugin{async onload(){await this.loadSettings(),L(this,this.settings),this.addSettingTab(new b(this.app,this,this.settings)),this.addRibbonIcon("rocket","Astro Modular Settings",()=>{new O(this.app,this.settings,async t=>{this.settings=t,await this.saveSettings()}).open()}),this.settings.runWizardOnStartup&&setTimeout(()=>{this.runStartupWizard()},2e3)}onunload(){}async loadSettings(){this.settings=Object.assign({},M,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async runStartupWizard(){new O(this.app,this.settings,async t=>{this.settings=t,await this.saveSettings()}).open()}openSettings(){this.app.setting.open(),this.app.setting.openTabById(this.manifest.id)}};
