/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var M=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var L=Object.prototype.hasOwnProperty;var z=(d,o)=>{for(var e in o)M(d,e,{get:o[e],enumerable:!0})},D=(d,o,e,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let n of I(o))!L.call(d,n)&&n!==e&&M(d,n,{get:()=>o[n],enumerable:!(t=A(o,n))||t.enumerable});return d};var N=d=>D(M({},"__esModule",{value:!0}),d);var H={};z(H,{default:()=>F});module.exports=N(H);var $=require("obsidian");var T=["Inter","Roboto","Open Sans","Lato","Poppins","Source Sans Pro","Nunito","Montserrat","Playfair Display","Merriweather","Lora","Crimson Text","PT Serif","Libre Baskerville","Fira Code","JetBrains Mono","Source Code Pro","IBM Plex Mono","Cascadia Code"],x={runWizardOnStartup:!0,currentTemplate:"standard",currentTheme:"oxygen",contentOrganization:"file-based",features:{commandPalette:!0,tableOfContents:!0,readingTime:!0,linkedMentions:!0,comments:!1,graphView:!0,postNavigation:!0,scrollToTop:!0,darkModeToggleButton:"both",showSocialIconsInFooter:!0,showPostCardCoverImages:"featured-and-posts",postCardAspectRatio:"og",linkedMentionsCompact:!1},typography:{headingFont:"Inter",proseFont:"Inter",monoFont:"JetBrains Mono",fontSource:"local",customFonts:{heading:"",prose:"",mono:""}},optionalFeatures:{profilePicture:{enabled:!1,image:"/profile.jpg",alt:"Profile picture",size:"md",placement:"footer",style:"circle"},comments:{enabled:!1,provider:"giscus"}},deployment:{platform:"netlify"},pluginConfig:{obsidianSettings:{attachmentLocation:"subfolder",subfolderName:"attachments"},astroComposerSettings:{creationMode:"file-based",indexFileName:"index"},imageInserterSettings:{insertFormat:"[[attachments/{image-url}]]"}}},f=[{id:"oxygen",name:"Oxygen",description:"Modern, clean design",previewColors:["#0ea5e9","#0284c7","#f8fafc"]},{id:"minimal",name:"Minimal",description:"Understated with high contrast",previewColors:["#708794","#5a6d77","#fafafa"]},{id:"atom",name:"Atom",description:"Dark theme with vibrant accents",previewColors:["#61dafb","#1a92ff","#282c34"]},{id:"ayu-light",name:"Ayu Light",description:"Clean light theme",previewColors:["#ffcc66","#e6913d","#fefefe"]},{id:"ayu-mirage",name:"Ayu Mirage",description:"Soft dark theme",previewColors:["#ffcc66","#e6913d","#1f2430"]},{id:"ayu-dark",name:"Ayu Dark",description:"Deep dark theme",previewColors:["#ffcc66","#e6913d","#0f1419"]},{id:"catppuccin",name:"Catppuccin",description:"Pastel color palette",previewColors:["#dcb6af","#c49a8f","#1e1e2e"]},{id:"charcoal",name:"Charcoal",description:"Dark, professional look",previewColors:["#ffffff","#ff6b6b","#2d2d2d"]},{id:"dracula",name:"Dracula",description:"Dark theme with purple accents",previewColors:["#bd93f9","#8b5cf6","#282a36"]},{id:"everforest",name:"Everforest",description:"Soft, warm colors",previewColors:["#a7c080","#dbbc7f","#2d353b"]},{id:"flexoki",name:"Flexoki",description:"Based on Material Design 3",previewColors:["#ff6b6b","#e6b673","#100f0f"]},{id:"gruvbox",name:"Gruvbox",description:"Retro groove color scheme",previewColors:["#fabd2f","#b16286","#282828"]},{id:"macos",name:"macOS",description:"Native macOS appearance",previewColors:["#007aff","#34c759","#ffffff"]},{id:"nord",name:"Nord",description:"Arctic-inspired color palette",previewColors:["#88c0d0","#a3be8c","#2e3440"]},{id:"obsidian",name:"Obsidian",description:"Matches Obsidian's default theme",previewColors:["#7c3aed","#ffffff","#1e1e1e"]},{id:"rose-pine",name:"Ros\xE9 Pine",description:"All natural pine, faux fir, and winter",previewColors:["#eb6f92","#9ccfd8","#191724"]},{id:"sky",name:"Sky",description:"Light, airy design",previewColors:["#0ea5e9","#06b6d4","#f0f9ff"]},{id:"solarized",name:"Solarized",description:"Precision colors for machines and people",previewColors:["#268bd2","#859900","#002b36"]},{id:"things",name:"Things",description:"Clean, minimal design",previewColors:["#007aff","#000000","#ffffff"]}],y=[{id:"standard",name:"Standard",description:"Full-featured blog with all default options enabled",features:["Command palette","Table of contents","Reading time","Linked mentions","Footer","Social icons","Scroll to top","Dark mode toggle"],recommended:!0},{id:"compact",name:"Compact",description:"Balanced setup for smaller sites with optimized layout",features:["Command palette","Table of contents","Reading time","Compact linked mentions","Custom aspect ratio"],recommended:!1},{id:"minimal",name:"Minimal",description:"Clean, simple blog with minimal features and content",features:["Command palette","Search posts/pages","Minimal navigation"],recommended:!1},{id:"custom",name:"Custom",description:"Granular control over every setting - opens config.ts",features:["All features configurable"],recommended:!1}];var P=require("obsidian");var S=require("obsidian");var b=class{constructor(o){this.app=o,this.configPath="../../../config.ts"}async getConfigFileInfo(){let o=this.app.vault.getAbstractFileByPath(this.configPath);if(!o)return{exists:!1,path:this.configPath,content:"",lastModified:new Date,valid:!1,errors:["Config file not found"]};try{let e=await this.app.vault.read(o),t=new Date(o.stat.mtime),n=this.validateConfigContent(e),a=n?[]:["Invalid TypeScript syntax or missing required exports"];return{exists:!0,path:this.configPath,content:e,lastModified:t,valid:n,errors:a}}catch(e){return{exists:!0,path:this.configPath,content:"",lastModified:new Date,valid:!1,errors:[`Error reading file: ${e.message}`]}}}validateConfigContent(o){return o.includes("defineConfig")||o.includes("export default")||o.includes("astro/config")}async readConfig(){return(await this.getConfigFileInfo()).content}async writeConfig(o){try{return await this.app.vault.create(this.configPath,o),!0}catch(e){try{return await this.app.vault.modify(this.app.vault.getAbstractFileByPath(this.configPath),o),!0}catch(t){return!1}}}async applyPreset(o){let e=await this.readConfig(),t=this.generateConfigFromPreset(o,e);return await this.writeConfig(t)}generateConfigFromPreset(o,e){let t=o.config;return this.getTemplateConfig(o.name,t)}getTemplateConfig(o,e){return`// Site configuration with TypeScript types

// Aspect ratio options for post cards
export type AspectRatio = 
  | "16:9" 
  | "4:3"
  | "3:2"
  | "og"
  | "square"
  | "golden"
  | "custom";

export interface SiteConfig {
  // Site Information
  site: string;
  title: string;
  description: string;
  author: string;
  language: string;
  
  // Global Settings
  theme: "minimal" | "oxygen" | "atom" | "ayu" | "catppuccin" | "charcoal" | "dracula" | "everforest" | "flexoki" | "gruvbox" | "macos" | "nord" | "obsidian" | "rose-pine" | "sky" | "solarized" | "things" | "custom";
  customThemeFile?: string;
  fonts: {
    source: "local" | "cdn";
    families: {
      body: string;
      heading: string;
      mono: string;
    };
    display: "swap" | "fallback" | "optional";
  };
  layout: {
    contentWidth: string;
  };
  footer: {
    enabled: boolean;
    content: string;
    showSocialIconsInFooter: boolean;
  };
  scrollToTop: boolean;
  darkModeToggleButton: "navigation" | "commandPalette" | "both";
  seo: {
    defaultOgImageAlt: string;
  };
  deployment: {
    platform: "netlify" | "vercel" | "github-pages";
  };
  
  // Command Palette
  commandPalette: {
    enabled: boolean;
    searchPosts: boolean;
    searchPages: boolean;
    searchProjects: boolean;
    searchDocs: boolean;
    sections: {
      quotations: boolean;
      pages: boolean;
      social: boolean;
    };
  };
  
  // Homepage Options
  homeOptions: {
    featuredPost: {
      enabled: boolean;
      type: "latest" | "featured";
      slug?: string;
    };
    recentPosts: {
      enabled: boolean;
      count: number;
    };
    projects: {
      enabled: boolean;
      count: number;
    };
    docs: {
      enabled: boolean;
      count: number;
    };
    blurb: {
      placement: "above" | "below" | "none";
    };
  };
  
  // Post Options
  postOptions: {
    postsPerPage: number;
    readingTime: boolean;
    wordCount: boolean;
    tableOfContents: boolean;
    tags: boolean;
    linkedMentions: {
      enabled: boolean;
      linkedMentionsCompact: boolean;
    };
    graphView: {
      enabled: boolean;
      showInSidebar: boolean;
      showInCommandPalette: boolean;
      maxNodes: number;
      showOrphanedPosts: boolean;
    };
    postNavigation: boolean;
    showPostCardCoverImages: "all" | "featured" | "home" | "posts" | "featured-and-posts" | "none";
    postCardAspectRatio: AspectRatio;
    customPostCardAspectRatio?: string;
    comments: {
      enabled: boolean;
      provider: "giscus";
      repo?: string;
      repoId?: string;
      category?: string;
      categoryId?: string;
      mapping?: string;
      strict?: string;
      reactions?: string;
      metadata?: string;
      inputPosition?: string;
      theme?: string;
      lang?: string;
      loading?: string;
    };
  };
  
  // Navigation
  navigation: {
    showNavigation: boolean;
    style: "traditional" | "minimal";
    showMobileMenu: boolean;
    pages: Array<{ title: string; url: string }>;
    social: Array<{ title: string; url: string; icon: string }>;
  };
  
  // Profile Picture
  profilePicture: {
    enabled: boolean;
    image: string;
    alt: string;
    size: "sm" | "md" | "lg";
    url?: string;
    placement: "footer" | "header";
    style: "circle" | "square" | "none";
  };
}

// Template-specific configurations
const getTemplateConfig = (template: string): Partial<SiteConfig> => {
  switch (template) {
            case 'standard':
              return {
                theme: '${e.currentTheme}',
                fonts: {
                  source: '${e.typography.fontSource}',
                  families: {
                    body: '${e.typography.fontSource==="cdn"?e.typography.customFonts.prose:e.typography.proseFont}',
                    heading: '${e.typography.fontSource==="cdn"?e.typography.customFonts.heading:e.typography.headingFont}',
                    mono: '${e.typography.fontSource==="cdn"?e.typography.customFonts.mono:e.typography.monoFont}',
                  },
                  display: 'swap',
                },
        layout: {
          contentWidth: '45rem',
        },
        footer: {
          enabled: true,
          content: '\xA9 2025 {author}. Built with Astro Modular.',
          showSocialIconsInFooter: true,
        },
        scrollToTop: true,
        darkModeToggleButton: 'both',
        commandPalette: {
          enabled: true,
          searchPosts: true,
          searchPages: true,
          searchProjects: true,
          searchDocs: true,
          sections: {
            quotations: true,
            pages: true,
            social: true,
          },
        },
        homeOptions: {
          featuredPost: {
            enabled: true,
            type: 'latest',
          },
          recentPosts: {
            enabled: true,
            count: 7,
          },
          projects: {
            enabled: false,
            count: 2,
          },
          docs: {
            enabled: false,
            count: 3,
          },
          blurb: {
            placement: 'below',
          },
        },
        postOptions: {
          postsPerPage: 6,
          readingTime: true,
          wordCount: true,
          tableOfContents: true,
          tags: true,
          linkedMentions: {
            enabled: true,
            linkedMentionsCompact: false,
          },
          graphView: {
            enabled: true,
            showInSidebar: true,
            showInCommandPalette: true,
            maxNodes: 100,
            showOrphanedPosts: true,
          },
          postNavigation: true,
          showPostCardCoverImages: 'featured-and-posts',
          postCardAspectRatio: 'og',
          comments: {
            enabled: ${e.optionalFeatures.comments.enabled},
            provider: 'giscus',
          },
        },
        navigation: {
          showNavigation: true,
          style: 'traditional',
          showMobileMenu: true,
          pages: [
            { title: 'Posts', url: '/posts' },
            { title: 'About', url: '/about' }
          ],
          social: [
            { title: 'GitHub', url: 'https://github.com/username', icon: 'github' }
          ],
        },
        profilePicture: {
          enabled: ${e.optionalFeatures.profilePicture.enabled},
          image: '${e.optionalFeatures.profilePicture.image}',
          alt: '${e.optionalFeatures.profilePicture.alt}',
          size: '${e.optionalFeatures.profilePicture.size}',
          url: '${e.optionalFeatures.profilePicture.url}',
          placement: '${e.optionalFeatures.profilePicture.placement}',
          style: '${e.optionalFeatures.profilePicture.style}',
        },
        deployment: {
          platform: '${e.deployment.platform}',
        },
      };
            case 'compact':
              return {
                theme: '${e.currentTheme}',
                fonts: {
                  source: '${e.typography.fontSource}',
                  families: {
                    body: '${e.typography.fontSource==="cdn"?e.typography.customFonts.prose:e.typography.proseFont}',
                    heading: '${e.typography.fontSource==="cdn"?e.typography.customFonts.heading:e.typography.headingFont}',
                    mono: '${e.typography.fontSource==="cdn"?e.typography.customFonts.mono:e.typography.monoFont}',
                  },
                  display: 'swap',
                },
        layout: {
          contentWidth: '42rem',
        },
        footer: {
          enabled: true,
          content: '\xA9 2025 {author}. Built with Astro Modular.',
          showSocialIconsInFooter: false,
        },
        scrollToTop: true,
        darkModeToggleButton: 'commandPalette',
        commandPalette: {
          enabled: true,
          searchPosts: true,
          searchPages: false,
          searchProjects: true,
          searchDocs: true,
          sections: {
            quotations: true,
            pages: true,
            social: true,
          },
        },
        homeOptions: {
          featuredPost: {
            enabled: false,
            type: 'latest',
          },
          recentPosts: {
            enabled: true,
            count: 7,
          },
          projects: {
            enabled: false,
            count: 2,
          },
          docs: {
            enabled: false,
            count: 3,
          },
          blurb: {
            placement: 'below',
          },
        },
        postOptions: {
          postsPerPage: 6,
          readingTime: true,
          wordCount: true,
          tableOfContents: true,
          tags: true,
          linkedMentions: {
            enabled: true,
            linkedMentionsCompact: true,
          },
          graphView: {
            enabled: false,
            showInSidebar: false,
            showInCommandPalette: false,
            maxNodes: 100,
            showOrphanedPosts: true,
          },
          postNavigation: true,
          showPostCardCoverImages: 'posts',
          postCardAspectRatio: 'custom',
          customPostCardAspectRatio: '2.5/1',
          comments: {
            enabled: ${e.optionalFeatures.comments.enabled},
            provider: 'giscus',
          },
        },
        navigation: {
          showNavigation: true,
          style: 'minimal',
          showMobileMenu: true,
          pages: [
            { title: 'Posts', url: '/posts' },
            { title: 'About', url: '/about' }
          ],
          social: [
            { title: 'GitHub', url: 'https://github.com/username', icon: 'github' }
          ],
        },
        profilePicture: {
          enabled: ${e.optionalFeatures.profilePicture.enabled},
          image: '${e.optionalFeatures.profilePicture.image}',
          alt: '${e.optionalFeatures.profilePicture.alt}',
          size: '${e.optionalFeatures.profilePicture.size}',
          url: '${e.optionalFeatures.profilePicture.url}',
          placement: '${e.optionalFeatures.profilePicture.placement}',
          style: '${e.optionalFeatures.profilePicture.style}',
        },
        deployment: {
          platform: '${e.deployment.platform}',
        },
      };
            case 'minimal':
              return {
                theme: '${e.currentTheme}',
                fonts: {
                  source: '${e.typography.fontSource}',
                  families: {
                    body: '${e.typography.fontSource==="cdn"?e.typography.customFonts.prose:e.typography.proseFont}',
                    heading: '${e.typography.fontSource==="cdn"?e.typography.customFonts.heading:e.typography.headingFont}',
                    mono: '${e.typography.fontSource==="cdn"?e.typography.customFonts.mono:e.typography.monoFont}',
                  },
                  display: 'swap',
                },
        layout: {
          contentWidth: '40rem',
        },
        footer: {
          enabled: true,
          content: '\xA9 2025 {author}. Built with Astro Modular.',
          showSocialIconsInFooter: true,
        },
        scrollToTop: true,
        darkModeToggleButton: 'commandPalette',
        commandPalette: {
          enabled: true,
          searchPosts: true,
          searchPages: true,
          searchProjects: false,
          searchDocs: false,
          sections: {
            quotations: false,
            pages: false,
            social: true,
          },
        },
        homeOptions: {
          featuredPost: {
            enabled: false,
            type: 'latest',
          },
          recentPosts: {
            enabled: true,
            count: 7,
          },
          projects: {
            enabled: false,
            count: 2,
          },
          docs: {
            enabled: false,
            count: 3,
          },
          blurb: {
            placement: 'below',
          },
        },
        postOptions: {
          postsPerPage: 6,
          readingTime: false,
          wordCount: false,
          tableOfContents: false,
          tags: false,
          linkedMentions: {
            enabled: false,
            linkedMentionsCompact: false,
          },
          graphView: {
            enabled: false,
            showInSidebar: false,
            showInCommandPalette: false,
            maxNodes: 100,
            showOrphanedPosts: true,
          },
          postNavigation: false,
          showPostCardCoverImages: 'none',
          postCardAspectRatio: 'og',
          comments: {
            enabled: ${e.optionalFeatures.comments.enabled},
            provider: 'giscus',
          },
        },
        navigation: {
          showNavigation: true,
          style: 'minimal',
          showMobileMenu: true,
          pages: [
            { title: 'Posts', url: '/posts' },
            { title: 'About', url: '/about' }
          ],
          social: [
            { title: 'GitHub', url: 'https://github.com/username', icon: 'github' }
          ],
        },
        profilePicture: {
          enabled: ${e.optionalFeatures.profilePicture.enabled},
          image: '${e.optionalFeatures.profilePicture.image}',
          alt: '${e.optionalFeatures.profilePicture.alt}',
          size: '${e.optionalFeatures.profilePicture.size}',
          url: '${e.optionalFeatures.profilePicture.url}',
          placement: '${e.optionalFeatures.profilePicture.placement}',
          style: '${e.optionalFeatures.profilePicture.style}',
        },
        deployment: {
          platform: '${e.deployment.platform}',
        },
      };
    default:
      return {};
  }
};

// Export the site configuration
export const siteConfig: SiteConfig = {
  // Site Information
  site: 'https://yourdomain.com',
  title: 'Your Blog Title',
  description: 'Your blog description',
  author: 'Your Name',
  language: 'en',
  
  // Apply template configuration
  ...getTemplateConfig('${o}'),
} as SiteConfig;

export default siteConfig;`}async detectAstroDevServer(){let o=this.app.vault.getAbstractFileByPath("package.json");if(o)try{let e=await this.app.vault.read(o);return e.includes("astro")&&e.includes("dev")}catch(e){return!1}return!1}async triggerRebuild(){}};var v=class{constructor(o){this.app=o}async getPluginStatus(){var n;let o=this.app.plugins,e=["astro-composer","insert-unsplash-image","obsidian-shellcommands"],t=[];for(let a of e){let i=(n=o==null?void 0:o.plugins)==null?void 0:n[a],r=(o==null?void 0:o.enabledPlugins)&&o.enabledPlugins.has(a),u=this.isPluginInstalled(a);t.push({name:this.getPluginDisplayName(a),installed:u,enabled:r,configurable:this.isPluginConfigurable(a),currentSettings:i?await this.getPluginSettings(i):void 0})}return t}isPluginInstalled(o){var n,a;let e=(n=this.app.plugins)==null?void 0:n.communityPlugins;if(e&&Array.isArray(e))return e.includes(o);let t=this.app.plugins;return!!((a=t==null?void 0:t.plugins)!=null&&a[o])}getPluginDisplayName(o){return{"astro-composer":"Astro Composer","insert-unsplash-image":"Image Inserter","obsidian-shellcommands":"Shell Commands"}[o]||o}isPluginConfigurable(o){return["astro-composer","insert-unsplash-image"].includes(o)}async getPluginSettings(o){return{}}async configurePlugins(o){try{return await this.configureObsidianSettings(o.obsidianSettings),await this.configureAstroComposerSettings(o.astroComposerSettings),await this.configureImageInserterSettings(o.imageInserterSettings),!0}catch(e){return!1}}async configureObsidianSettings(o){let e=this.app.vault.config;o.attachmentLocation==="subfolder"?(e.newLinkFormat="relative",e.attachmentFolderPath=`./${o.subfolderName}`):(e.newLinkFormat="relative",e.attachmentFolderPath=""),await this.app.vault.saveConfig()}async configureAstroComposerSettings(o){}async configureImageInserterSettings(o){}async getManualConfigurationInstructions(o){let e=`# Manual Configuration Instructions

`;return e+=`## Obsidian Settings
`,e+=`1. Go to **Settings \u2192 Files & Links**
`,e+="2. Set **Default location for new attachments** to: ",e+=o.obsidianSettings.attachmentLocation==="subfolder"?'"In subfolder under current folder"':'"Same folder as current file"',e+=`
`,o.obsidianSettings.attachmentLocation==="subfolder"&&(e+=`3. Set **Subfolder name** to: "${o.obsidianSettings.subfolderName}"
`),e+=`
`,e+=`## Astro Composer Plugin
`,e+=`1. Go to **Settings \u2192 Community plugins \u2192 Astro Composer**
`,e+=`2. Set **Creation mode** to: "${o.astroComposerSettings.creationMode}"
`,o.astroComposerSettings.creationMode==="folder-based"&&(e+=`3. Set **Index file name** to: "${o.astroComposerSettings.indexFileName}"
`),e+=`
`,e+=`## Image Inserter Plugin
`,e+=`1. Go to **Settings \u2192 Community plugins \u2192 Image Inserter**
`,e+=`2. Set **Insert to Frontmatter Value Format** to: "${o.imageInserterSettings.insertFormat}"
`,e}};var m=class extends S.Modal{constructor(e,t,n){super(e);this.currentStep=1;this.totalSteps=9;this.selectedTemplate="standard";this.selectedTheme="oxygen";this.selectedContentOrg="file-based";this.selectedFeatures={};this.selectedTypography={headingFont:"Inter",proseFont:"Inter",monoFont:"JetBrains Mono",fontSource:"local",customFonts:{heading:"",prose:"",mono:""}};this.selectedOptionalFeatures={profilePicture:{enabled:!1,image:"/profile.jpg",alt:"Profile picture",size:"md",url:"",placement:"footer",style:"circle"},comments:{enabled:!1,provider:"giscus"}};this.selectedDeployment="netlify";this.runWizardOnStartup=!0;this.settings=t,this.configManager=new b(e),this.pluginManager=new v(e),this.onComplete=n}onOpen(){let{contentEl:e}=this;e.empty(),e.addClass("astro-modular-wizard"),this.renderCurrentStep()}onClose(){let{contentEl:e}=this;e.empty()}renderCurrentStep(){let{contentEl:e}=this;e.empty();let t=e.createDiv("wizard-header"),n=Math.max(this.currentStep/this.totalSteps*100,5);t.innerHTML=`
			<h1>Astro Modular Setup</h1>
			<div class="wizard-progress">
				<div class="progress-bar">
					<div class="progress-fill"></div>
				</div>
				<span class="progress-text">Step ${this.currentStep} of ${this.totalSteps}</span>
			</div>
		`;let a=t.querySelector(".progress-fill"),i=t.querySelector(".progress-bar");a&&i&&(a.style.width=`${n}%`,a.style.setProperty("background","var(--interactive-accent)","important"),a.style.setProperty("height","12px","important"),a.style.setProperty("border-radius","4px","important"),a.style.setProperty("display","block","important"),a.style.setProperty("min-height","12px","important"),a.style.setProperty("margin","0","important"),a.style.setProperty("padding","0","important"),a.style.setProperty("position","absolute","important"),a.style.setProperty("top","0","important"),a.style.setProperty("left","0","important"));let r=e.createDiv("wizard-content");this.renderStepContent(r);let u=e.createDiv("wizard-footer");this.renderStepFooter(u)}renderStepContent(e){switch(this.currentStep){case 1:this.renderWelcomeStep(e);break;case 2:this.renderTemplateStep(e);break;case 3:this.renderThemeStep(e);break;case 4:this.renderFontStep(e);break;case 5:this.renderContentOrgStep(e);break;case 6:this.renderOptionalFeaturesStep(e);break;case 7:this.renderDeploymentStep(e);break;case 8:this.renderPluginConfigStep(e);break;case 9:this.renderFinalizeStep(e);break}}renderWelcomeStep(e){e.innerHTML=`
			<div class="welcome-content">
				<h2>Welcome to Astro Modular!</h2>
				<p>This wizard will help you set up your Astro Modular theme with the perfect configuration for your needs.</p>
				<p class="welcome-note">
					<a href="https://github.com/astro-modular/docs" target="_blank">View documentation</a>
				</p>
			</div>
		`}renderTemplateStep(e){e.innerHTML=`
			<div class="template-selection">
				<h2>Choose your template</h2>
				<p>Select a template that best fits your content type and goals.</p>
				<div class="template-options">
					${y.map(t=>`
						<div class="template-option ${this.selectedTemplate===t.id?"selected":""}" 
							 data-template="${t.id}">
							<div class="template-header">
								<h3>${t.name}</h3>
								${t.recommended?'<span class="recommended">Recommended</span>':""}
							</div>
							<p class="template-description">${t.description}</p>
							<div class="template-features">
								${t.features.map(n=>`<span class="feature-tag">${n}</span>`).join("")}
							</div>
						</div>
					`).join("")}
				</div>
			</div>
		`,e.querySelectorAll(".template-option").forEach(t=>{t.addEventListener("click",()=>{let n=t.getAttribute("data-template");if(n){if(this.selectedTemplate=n,n==="custom"){let a="../../../config.ts";this.app.vault.getAbstractFileByPath(a)?this.app.workspace.openLinkText("",a):(this.app.vault.create(a,`// Astro Modular Configuration
// Customize your settings here

export const siteConfig = {
  // Add your configuration here
};
`),this.app.workspace.openLinkText("",a)),new S.Notice("Opening config.ts for custom configuration"),this.close();return}this.renderCurrentStep()}})})}renderThemeStep(e){e.innerHTML=`
			<div class="theme-selection">
				<h2>Choose your theme</h2>
				<p>Select a color scheme that matches your style and content.</p>
				<div class="theme-options">
					${f.map(t=>`
						<div class="theme-option ${this.selectedTheme===t.id?"selected":""}" 
							 data-theme="${t.id}">
							<div class="theme-preview" style="background: linear-gradient(135deg, ${t.previewColors.join(", ")});">
								<div class="theme-preview-content">
									<div class="preview-text">Sample Text</div>
									<div class="preview-accent">Accent</div>
								</div>
							</div>
							<div class="theme-info">
								<h3>${t.name}</h3>
								<p>${t.description}</p>
							</div>
						</div>
					`).join("")}
				</div>
			</div>
		`,e.querySelectorAll(".theme-option").forEach(t=>{t.addEventListener("click",()=>{let n=t.getAttribute("data-theme");n&&(this.selectedTheme=n,this.renderCurrentStep())})})}renderContentOrgStep(e){e.innerHTML=`
			<div class="content-org-selection">
				<h2>Content organization</h2>
				<p>Choose how you want to organize your content and assets.</p>
				<div class="org-options">
					<div class="org-option ${this.selectedContentOrg==="file-based"?"selected":""}" 
						 data-org="file-based">
						<div class="org-header">
							<h3>File-based</h3>
							<span class="default-badge">Default</span>
						</div>
						<p>Single markdown files with images in attachments subfolder</p>
						<div class="org-example">
							<pre><code>posts/
\u251C\u2500\u2500 my-post.md
\u2514\u2500\u2500 attachments/
    \u2514\u2500\u2500 image.jpg</code></pre>
						</div>
					</div>
					<div class="org-option ${this.selectedContentOrg==="folder-based"?"selected":""}" 
						 data-org="folder-based">
						<div class="org-header">
							<h3>Folder-based</h3>
						</div>
						<p>Each post gets its own folder with co-located assets</p>
						<div class="org-example">
							<pre><code>posts/
\u251C\u2500\u2500 my-post/
\u2502   \u251C\u2500\u2500 index.md
\u2502   \u2514\u2500\u2500 image.jpg
\u2514\u2500\u2500 another-post/
    \u251C\u2500\u2500 index.md
    \u2514\u2500\u2500 image.jpg</code></pre>
						</div>
					</div>
				</div>
			</div>
		`,e.querySelectorAll(".org-option").forEach(t=>{t.addEventListener("click",()=>{let n=t.getAttribute("data-org");n&&(this.selectedContentOrg=n,this.renderCurrentStep())})})}renderFontStep(e){var t,n,a,i,r,u,p;e.innerHTML=`
			<div class="font-selection">
				<h2>Choose your fonts</h2>
				<p>Select fonts for headings, body text, and code.</p>
				<div class="font-options">
					<div class="font-setting">
						<label>Heading Font</label>
						<select id="heading-font">
							${T.map(s=>`<option value="${s}" ${this.selectedTypography.headingFont===s?"selected":""}>${s}</option>`).join("")}
						</select>
					</div>
					<div class="font-setting">
						<label>Body Font</label>
						<select id="prose-font">
							${T.map(s=>`<option value="${s}" ${this.selectedTypography.proseFont===s?"selected":""}>${s}</option>`).join("")}
						</select>
					</div>
					<div class="font-setting">
						<label>Monospace Font</label>
						<select id="mono-font">
							${T.map(s=>`<option value="${s}" ${this.selectedTypography.monoFont===s?"selected":""}>${s}</option>`).join("")}
						</select>
					</div>
					<div class="font-setting">
						<label>Font Source</label>
						<select id="font-source">
							<option value="local" ${this.selectedTypography.fontSource==="local"?"selected":""}>Local (Google Fonts)</option>
							<option value="cdn" ${this.selectedTypography.fontSource==="cdn"?"selected":""}>CDN (Custom)</option>
						</select>
					</div>
					${this.selectedTypography.fontSource==="cdn"?`
						<div class="font-setting">
							<label>Custom Font URLs (comma-separated)</label>
							<input type="text" id="custom-fonts" placeholder="https://fonts.googleapis.com/css2?family=Custom+Font:wght@400;600&display=swap">
						</div>
						<div class="font-setting">
							<label>Heading Font Name</label>
							<input type="text" id="custom-heading-font" value="${this.selectedTypography.customFonts.heading}" placeholder="Custom Heading Font">
						</div>
						<div class="font-setting">
							<label>Body Font Name</label>
							<input type="text" id="custom-prose-font" value="${this.selectedTypography.customFonts.prose}" placeholder="Custom Body Font">
						</div>
						<div class="font-setting">
							<label>Monospace Font Name</label>
							<input type="text" id="custom-mono-font" value="${this.selectedTypography.customFonts.mono}" placeholder="Custom Monospace Font">
						</div>
					`:""}
				</div>
			</div>
		`,(t=e.querySelector("#heading-font"))==null||t.addEventListener("change",s=>{this.selectedTypography.headingFont=s.target.value}),(n=e.querySelector("#prose-font"))==null||n.addEventListener("change",s=>{this.selectedTypography.proseFont=s.target.value}),(a=e.querySelector("#mono-font"))==null||a.addEventListener("change",s=>{this.selectedTypography.monoFont=s.target.value}),(i=e.querySelector("#font-source"))==null||i.addEventListener("change",s=>{this.selectedTypography.fontSource=s.target.value,this.renderCurrentStep()}),(r=e.querySelector("#custom-heading-font"))==null||r.addEventListener("input",s=>{this.selectedTypography.customFonts.heading=s.target.value}),(u=e.querySelector("#custom-prose-font"))==null||u.addEventListener("input",s=>{this.selectedTypography.customFonts.prose=s.target.value}),(p=e.querySelector("#custom-mono-font"))==null||p.addEventListener("input",s=>{this.selectedTypography.customFonts.mono=s.target.value})}renderOptionalFeaturesStep(e){var t,n,a,i,r,u,p,s;e.innerHTML=`
			<div class="optional-features">
				<h2>Optional features</h2>
				<p>Configure additional features for your site.</p>
				
				<div class="features-grid">
					<div class="feature-card">
						<div class="feature-header">
							<label class="feature-toggle">
								<input type="checkbox" ${this.selectedOptionalFeatures.profilePicture.enabled?"checked":""} id="profile-picture-enabled">
								<span class="toggle-slider"></span>
								<span class="feature-label">Profile Picture</span>
							</label>
						</div>
						<div class="feature-details" id="profile-picture-details" style="display: ${this.selectedOptionalFeatures.profilePicture.enabled?"block":"none"};">
							<div class="settings-grid">
								<div class="setting-group">
									<label>Image Path (within /public folder)</label>
									<input type="text" id="profile-image" value="${this.selectedOptionalFeatures.profilePicture.image}" placeholder="/profile.jpg">
								</div>
								<div class="setting-group">
									<label>Alt Text</label>
									<input type="text" id="profile-alt" value="${this.selectedOptionalFeatures.profilePicture.alt}" placeholder="Profile picture">
								</div>
								<div class="setting-group">
									<label>Size</label>
									<select id="profile-size">
										<option value="sm" ${this.selectedOptionalFeatures.profilePicture.size==="sm"?"selected":""}>Small (32px)</option>
										<option value="md" ${this.selectedOptionalFeatures.profilePicture.size==="md"?"selected":""}>Medium (48px)</option>
										<option value="lg" ${this.selectedOptionalFeatures.profilePicture.size==="lg"?"selected":""}>Large (64px)</option>
									</select>
								</div>
								<div class="setting-group">
									<label>URL (optional)</label>
									<input type="text" id="profile-url" value="${this.selectedOptionalFeatures.profilePicture.url}" placeholder="/about">
								</div>
								<div class="setting-group">
									<label>Placement</label>
									<select id="profile-placement">
										<option value="footer" ${this.selectedOptionalFeatures.profilePicture.placement==="footer"?"selected":""}>Footer</option>
										<option value="header" ${this.selectedOptionalFeatures.profilePicture.placement==="header"?"selected":""}>Header</option>
									</select>
								</div>
								<div class="setting-group">
									<label>Style</label>
									<select id="profile-style">
										<option value="circle" ${this.selectedOptionalFeatures.profilePicture.style==="circle"?"selected":""}>Circle</option>
										<option value="square" ${this.selectedOptionalFeatures.profilePicture.style==="square"?"selected":""}>Square</option>
										<option value="none" ${this.selectedOptionalFeatures.profilePicture.style==="none"?"selected":""}>None</option>
									</select>
								</div>
							</div>
						</div>
					</div>
					
					<div class="feature-card">
						<div class="feature-header">
							<label class="feature-toggle">
								<input type="checkbox" ${this.selectedOptionalFeatures.comments.enabled?"checked":""} id="comments-enabled">
								<span class="toggle-slider"></span>
								<span class="feature-label">Comments (Giscus)</span>
							</label>
						</div>
						<div class="feature-details" id="comments-details" style="display: ${this.selectedOptionalFeatures.comments.enabled?"block":"none"};">
							<div class="feature-note">
								<p>Comments require GitHub repository setup. See the <a href="https://github.com/astro-modular/docs" target="_blank">documentation</a> for detailed setup instructions.</p>
							</div>
							<div style="height: 1rem;"></div>
						</div>
					</div>
				</div>
			</div>
		`,(t=e.querySelector("#profile-picture-enabled"))==null||t.addEventListener("change",c=>{this.selectedOptionalFeatures.profilePicture.enabled=c.target.checked;let g=e.querySelector("#profile-picture-details");g.style.display=this.selectedOptionalFeatures.profilePicture.enabled?"block":"none"}),(n=e.querySelector("#comments-enabled"))==null||n.addEventListener("change",c=>{this.selectedOptionalFeatures.comments.enabled=c.target.checked;let g=e.querySelector("#comments-details");g.style.display=this.selectedOptionalFeatures.comments.enabled?"block":"none"}),(a=e.querySelector("#profile-image"))==null||a.addEventListener("change",c=>{this.selectedOptionalFeatures.profilePicture.image=c.target.value}),(i=e.querySelector("#profile-alt"))==null||i.addEventListener("change",c=>{this.selectedOptionalFeatures.profilePicture.alt=c.target.value}),(r=e.querySelector("#profile-size"))==null||r.addEventListener("change",c=>{this.selectedOptionalFeatures.profilePicture.size=c.target.value}),(u=e.querySelector("#profile-url"))==null||u.addEventListener("change",c=>{this.selectedOptionalFeatures.profilePicture.url=c.target.value}),(p=e.querySelector("#profile-placement"))==null||p.addEventListener("change",c=>{this.selectedOptionalFeatures.profilePicture.placement=c.target.value}),(s=e.querySelector("#profile-style"))==null||s.addEventListener("change",c=>{this.selectedOptionalFeatures.profilePicture.style=c.target.value})}renderDeploymentStep(e){e.innerHTML=`
			<div class="deployment-selection">
				<h2>Deployment platform</h2>
				<p>Choose your deployment platform for automatic configuration file generation.</p>
				<div class="deployment-options">
					<div class="deployment-option ${this.selectedDeployment==="netlify"?"selected":""}" data-platform="netlify">
						<div class="deployment-header">
							<h3>Netlify</h3>
							<span class="default-badge">Default</span>
						</div>
						<p>Generates netlify.toml with redirects and build settings</p>
					</div>
					<div class="deployment-option ${this.selectedDeployment==="vercel"?"selected":""}" data-platform="vercel">
						<div class="deployment-header">
							<h3>Vercel</h3>
						</div>
						<p>Generates vercel.json with redirects and cache headers</p>
					</div>
					<div class="deployment-option ${this.selectedDeployment==="github-pages"?"selected":""}" data-platform="github-pages">
						<div class="deployment-header">
							<h3>GitHub Pages</h3>
						</div>
						<p>Generates public/redirects.txt for GitHub Pages redirects</p>
					</div>
				</div>
			</div>
		`,e.querySelectorAll(".deployment-option").forEach(t=>{t.addEventListener("click",()=>{let n=t.getAttribute("data-platform");n&&(this.selectedDeployment=n,this.renderCurrentStep())})})}renderFeaturesStep(e){if(this.selectedTemplate!=="custom"){this.currentStep++,this.renderCurrentStep();return}e.innerHTML=`
			<div class="features-selection">
				<h2>Configure features</h2>
				<p>Choose which features you want to enable for your site.</p>
				<div class="features-list">
					${Object.entries({commandPalette:"Command palette",tableOfContents:"Table of contents",readingTime:"Reading time",linkedMentions:"Linked mentions",comments:"Comments"}).map(([t,n])=>`
						<div class="feature-setting">
							<label class="feature-toggle">
								<input type="checkbox" ${this.selectedFeatures[t]?"checked":""} data-feature="${t}">
								<span class="toggle-slider"></span>
								<span class="feature-label">${n}</span>
							</label>
						</div>
					`).join("")}
				</div>
			</div>
		`,e.querySelectorAll('input[type="checkbox"]').forEach(t=>{t.addEventListener("change",n=>{let a=n.target,i=a.dataset.feature;i&&(this.selectedFeatures[i]=a.checked)})})}async renderPluginConfigStep(e){var n,a;let t=await this.pluginManager.getPluginStatus();e.innerHTML=`
			<div class="plugin-config">
				<h2>Plugin configuration</h2>
				<p>We'll automatically configure your plugins based on your choices.</p>
				<div class="plugin-status">
					${t.map(i=>`
						<div class="plugin-item ${i.installed?"installed":"missing"}">
							<div class="plugin-icon">${i.installed?"\u2705":"\u274C"}</div>
							<div class="plugin-info">
								<h3>${i.name}</h3>
								<p>${i.installed?"Ready to configure":"Not installed"}</p>
							</div>
						</div>
					`).join("")}
				</div>
				<div class="config-options">
					<button class="config-button primary" id="auto-configure">Configure automatically</button>
					<button class="config-button secondary" id="manual-configure">Show manual instructions</button>
				</div>
			</div>
		`,(n=e.querySelector("#auto-configure"))==null||n.addEventListener("click",()=>{this.configurePlugins()}),(a=e.querySelector("#manual-configure"))==null||a.addEventListener("click",()=>{this.showManualInstructions()})}renderFinalizeStep(e){var t,n,a;e.innerHTML=`
			<div class="finalize-step">
				<h2>Almost done!</h2>
				<p>Review your configuration and complete the setup.</p>
				<div class="config-summary">
					<div class="summary-item">
						<strong>Template:</strong> ${(t=y.find(i=>i.id===this.selectedTemplate))==null?void 0:t.name}
					</div>
					<div class="summary-item">
						<strong>Theme:</strong> ${(n=f.find(i=>i.id===this.selectedTheme))==null?void 0:n.name}
					</div>
					<div class="summary-item">
						<strong>Organization:</strong> ${this.selectedContentOrg==="file-based"?"File-based":"Folder-based"}
					</div>
				</div>
				<div class="finalize-options">
					<label class="checkbox-option">
						<input type="checkbox" ${this.runWizardOnStartup?"checked":""} id="run-on-startup">
						<span>Run wizard on startup</span>
					</label>
				</div>
			</div>
		`,(a=e.querySelector("#run-on-startup"))==null||a.addEventListener("change",i=>{this.runWizardOnStartup=i.target.checked})}renderStepFooter(e){let t=e.createDiv("wizard-buttons");this.currentStep>1&&t.createEl("button",{text:"Previous",cls:"wizard-button secondary"}).addEventListener("click",()=>{this.currentStep--,this.renderCurrentStep()}),t.createEl("button",{text:this.currentStep===this.totalSteps?"Complete Setup":"Next",cls:"wizard-button primary"}).addEventListener("click",()=>{this.currentStep===this.totalSteps?this.completeSetup():(this.currentStep++,this.renderCurrentStep())}),this.currentStep<this.totalSteps&&this.currentStep>1&&t.createEl("button",{text:"Skip",cls:"wizard-button tertiary"}).addEventListener("click",()=>{this.applyDefaultValues(),this.currentStep++,this.renderCurrentStep()})}applyDefaultValues(){switch(this.currentStep){case 4:this.selectedTypography={headingFont:"Inter",proseFont:"Inter",monoFont:"JetBrains Mono",fontSource:"local",customFonts:{heading:"",prose:"",mono:""}};break;case 5:this.selectedContentOrg="file-based";break;case 6:this.selectedOptionalFeatures={profilePicture:{enabled:!1,image:"/profile.jpg",alt:"Profile picture",size:"md",url:"",placement:"footer",style:"circle"},comments:{enabled:!1,provider:"giscus"}};break;case 7:this.selectedDeployment="netlify";break}}async configurePlugins(){let e={obsidianSettings:{attachmentLocation:this.selectedContentOrg==="file-based"?"subfolder":"same-folder",subfolderName:"attachments"},astroComposerSettings:{creationMode:this.selectedContentOrg,indexFileName:"index"},imageInserterSettings:{insertFormat:this.selectedContentOrg==="file-based"?"[[attachments/{image-url}]]":"[[{image-url}]]"}};return await this.pluginManager.configurePlugins(e)}async showManualInstructions(){let e={obsidianSettings:{attachmentLocation:this.selectedContentOrg==="file-based"?"subfolder":"same-folder",subfolderName:"attachments"},astroComposerSettings:{creationMode:this.selectedContentOrg,indexFileName:"index"},imageInserterSettings:{insertFormat:this.selectedContentOrg==="file-based"?"[[attachments/{image-url}]]":"[[{image-url}]]"}},t=await this.pluginManager.getManualConfigurationInstructions(e),n=new S.Modal(this.app),a=t.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/^### (.*$)/gim,"<h3>$1</h3>").replace(/^## (.*$)/gim,"<h2>$1</h2>").replace(/^# (.*$)/gim,"<h1>$1</h1>").replace(/^\d+\. (.*$)/gim,"<li>$1</li>").replace(/^- (.*$)/gim,"<li>$1</li>").replace(/\n\n/g,"</p><p>").replace(/^(.*)$/gim,"<p>$1</p>").replace(/<p><\/p>/g,"").replace(/<p>(<h[1-6]>.*<\/h[1-6]>)<\/p>/g,"$1").replace(/<p>(<li>.*<\/li>)<\/p>/g,"<ul>$1</ul>").replace(/<\/ul><ul>/g,"").replace(/<p>(<strong>.*<\/strong>)<\/p>/g,"$1").replace(/<p>(<em>.*<\/em>)<\/p>/g,"$1");n.contentEl.innerHTML=`
			<div style="padding: 15px; line-height: 1.5; max-height: 75vh; overflow-y: auto;">
				${a}
			</div>
		`,n.open()}async completeSetup(){this.settings.currentTemplate=this.selectedTemplate,this.settings.currentTheme=this.selectedTheme,this.settings.contentOrganization=this.selectedContentOrg,this.settings.runWizardOnStartup=this.runWizardOnStartup,this.settings.typography=this.selectedTypography,this.settings.optionalFeatures=this.selectedOptionalFeatures,this.settings.deployment={platform:this.selectedDeployment},await this.configManager.applyPreset({name:this.selectedTemplate,description:"",features:this.selectedFeatures,theme:this.selectedTheme,contentOrganization:this.selectedContentOrg,config:this.settings}),await this.configManager.triggerRebuild();let e=await this.configurePlugins();this.onComplete(this.settings),this.close();let t=e?"Astro Modular setup complete! Configuration saved and plugins configured successfully. Your site is ready to go!":"Astro Modular setup complete! Configuration saved. Some plugins may need manual configuration - check the documentation for details.";new S.Notice(t,8e3)}};function k(d,o){d.addCommand({id:"open-settings",name:"Open Astro Modular Settings",callback:()=>{d.openSettings()}}),d.addCommand({id:"run-setup-wizard",name:"Run Setup Wizard",callback:()=>{new m(d.app,o,async t=>{o=t,await d.saveData(o)}).open()}}),d.addCommand({id:"open-config",name:"Open config.ts",callback:async()=>{d.app.vault.getAbstractFileByPath("astro.config.ts")?await d.app.workspace.openLinkText("","astro.config.ts"):new P.Notice("Config file not found. Make sure you have an Astro project in this vault.")}}),d.addCommand({id:"apply-configuration",name:"Apply Current Configuration",callback:async()=>{new P.Notice("Configuration applied successfully!")}}),d.addCommand({id:"toggle-wizard-startup",name:"Toggle Wizard on Startup",callback:async()=>{o.runWizardOnStartup=!o.runWizardOnStartup,await d.saveData(o),new P.Notice(`Wizard on startup ${o.runWizardOnStartup?"enabled":"disabled"}`)}})}var l=require("obsidian");var w=class extends l.PluginSettingTab{constructor(e,t,n){super(e,t);this.plugin=t,this.settings=n,this.configManager=new b(e),this.pluginManager=new v(e)}display(){let{containerEl:e}=this;e.empty(),e.addClass("astro-modular-settings");let t=e.createDiv("tab-container"),n=t.createDiv("tab-nav"),a=t.createDiv("tab-content"),i=[{id:"general",name:"General",description:"Basic settings and configuration overview",render:()=>this.renderGeneralTab(a)},{id:"quick-config",name:"Quick Config",description:"Fast template and theme changes",render:()=>this.renderQuickConfigTab(a)},{id:"features",name:"Features",description:"Enable or disable theme features",render:()=>this.renderFeaturesTab(a)},{id:"plugin-settings",name:"Plugin Settings",description:"Manage Obsidian plugin configurations",render:()=>this.renderPluginTab(a)},{id:"advanced",name:"Advanced",description:"Advanced options and utilities",render:()=>this.renderAdvancedTab(a)}];i.forEach((r,u)=>{let p=n.createEl("button",{text:r.name,cls:`tab-button ${u===0?"active":""}`});p.title=r.description,p.addEventListener("click",()=>{n.querySelectorAll(".tab-button").forEach(s=>s.classList.remove("active")),p.classList.add("active"),a.style.opacity="0",setTimeout(()=>{a.empty(),r.render(),a.style.opacity="1"},150)})}),i[0].render()}renderGeneralTab(e){var g,C;e.empty();let t=e.createDiv("settings-section"),n=t.createEl("h2",{text:"General Settings"}),a=t.createEl("p",{text:"Configure basic plugin behavior and view current status."});new l.Setting(e).setName("Run wizard on startup").setDesc("Show the setup wizard when Obsidian starts (if not disabled)").addToggle(h=>h.setValue(this.settings.runWizardOnStartup).onChange(async O=>{this.settings.runWizardOnStartup=O,await this.plugin.saveData(this.settings)}));let r=e.createDiv("config-display").createDiv("config-info"),u=r.createEl("h3",{text:"Current Configuration"}),p=r.createDiv("config-item");p.createEl("strong",{text:"Template: "}),p.createSpan({text:((g=y.find(h=>h.id===this.settings.currentTemplate))==null?void 0:g.name)||"Unknown"});let s=r.createDiv("config-item");s.createEl("strong",{text:"Theme: "}),s.createSpan({text:((C=f.find(h=>h.id===this.settings.currentTheme))==null?void 0:C.name)||"Unknown"});let c=r.createDiv("config-item");c.createEl("strong",{text:"Organization: "}),c.createSpan({text:this.settings.contentOrganization==="file-based"?"File-based":"Folder-based"}),new l.Setting(e).setName("Setup wizard").setDesc("Run the setup wizard to reconfigure your theme").addButton(h=>h.setButtonText("Run Setup Wizard").setCta().onClick(()=>{new m(this.app,this.settings,async E=>{this.settings=E,await this.plugin.saveData(this.settings),this.display()}).open()}))}renderQuickConfigTab(e){e.empty();let t=e.createDiv("settings-section"),n=t.createEl("h2",{text:"Quick Configuration"}),a=t.createEl("p",{text:"Quickly change your template, theme, and content organization."});new l.Setting(e).setName("Template").setDesc("Choose your content template").addDropdown(i=>{y.forEach(r=>{i.addOption(r.id,r.name)}),i.setValue(this.settings.currentTemplate),i.onChange(async r=>{this.settings.currentTemplate=r,await this.plugin.saveData(this.settings),this.display()})}),new l.Setting(e).setName("Theme").setDesc("Choose your color theme").addDropdown(i=>{f.forEach(r=>{i.addOption(r.id,r.name)}),i.setValue(this.settings.currentTheme),i.onChange(async r=>{this.settings.currentTheme=r,await this.plugin.saveData(this.settings)})}),new l.Setting(e).setName("Content organization").setDesc("Choose how to organize your content and assets").addDropdown(i=>{i.addOption("file-based","File-based"),i.addOption("folder-based","Folder-based"),i.setValue(this.settings.contentOrganization),i.onChange(async r=>{this.settings.contentOrganization=r,await this.plugin.saveData(this.settings)})}),new l.Setting(e).setName("Apply configuration").setDesc("Apply the current settings to your Astro configuration").addButton(i=>i.setButtonText("Apply Configuration").setCta().onClick(async()=>{await this.applyCurrentConfiguration()})),new l.Setting(e).setName("Edit config.ts directly").setDesc("Open your Astro configuration file in the editor").addButton(i=>i.setButtonText("Open config.ts").onClick(async()=>{await this.openConfigFile()}))}renderFeaturesTab(e){e.empty();let t=e.createDiv("settings-section"),n=t.createEl("h2",{text:"Feature Configuration"}),a=t.createEl("p",{text:"Enable or disable specific features for your site."});[{key:"commandPalette",name:"Command palette",desc:"Add a command palette to your site"},{key:"tableOfContents",name:"Table of contents",desc:"Show table of contents on pages"},{key:"readingTime",name:"Reading time",desc:"Display estimated reading time"},{key:"linkedMentions",name:"Linked mentions",desc:"Show linked mentions and backlinks"},{key:"comments",name:"Comments",desc:"Enable comment system"},{key:"graphView",name:"Graph view",desc:"Show graph view of post connections"},{key:"postNavigation",name:"Post navigation",desc:"Show next/previous post navigation"},{key:"scrollToTop",name:"Scroll to top",desc:"Show scroll to top button"},{key:"showSocialIconsInFooter",name:"Social icons in footer",desc:"Show social icons in footer"}].forEach(r=>{let u=r.key,p=this.settings.features[u],s=typeof p=="boolean"?p:!1;new l.Setting(e).setName(r.name).setDesc(r.desc).addToggle(c=>c.setValue(s).onChange(async g=>{this.settings.features[u]=g,await this.plugin.saveData(this.settings)}))}),new l.Setting(e).setName("Save configuration").setDesc("Save your feature settings to the configuration file").addButton(r=>r.setButtonText("Save Configuration").setCta().onClick(async()=>{await this.applyCurrentConfiguration()}))}async renderPluginTab(e){e.empty();let t=e.createDiv("settings-section"),n=t.createEl("h2",{text:"Plugin Configuration"}),a=t.createEl("p",{text:"Manage your Obsidian plugins and their settings."}),i=await this.pluginManager.getPluginStatus(),u=e.createDiv("plugin-status-container").createDiv("plugin-status");for(let p of i){let s=u.createDiv(`plugin-item ${p.installed?"installed":"missing"}`),c=s.createDiv("plugin-icon");c.textContent=p.installed?"\u2705":"\u274C";let g=s.createDiv("plugin-info");g.createEl("h3",{text:p.name});let C=p.installed?p.enabled?"Enabled":"Disabled":"Not installed";g.createEl("p",{text:C})}new l.Setting(e).setName("Configure automatically").setDesc("Automatically configure all installed plugins").addButton(p=>p.setButtonText("Configure Automatically").setCta().onClick(async()=>{await this.pluginManager.configurePlugins(this.settings.pluginConfig)?new l.Notice("Plugins configured successfully!"):new l.Notice("Some plugins could not be configured automatically.")})),new l.Setting(e).setName("Show manual instructions").setDesc("Get step-by-step instructions for manual configuration").addButton(p=>p.setButtonText("Show Manual Instructions").onClick(async()=>{let s=await this.pluginManager.getManualConfigurationInstructions(this.settings.pluginConfig),c=new l.Modal(this.app);c.titleEl.setText("Manual Configuration Instructions");let g=c.contentEl.createEl("pre");g.textContent=s,c.open()}))}renderAdvancedTab(e){e.empty();let t=e.createDiv("settings-section"),n=t.createEl("h2",{text:"Advanced Settings"}),a=t.createEl("p",{text:"Advanced configuration options and utilities."});new l.Setting(e).setName("Open config.ts in editor").setDesc("Open your Astro configuration file in the editor").addButton(i=>i.setButtonText("Open config.ts").onClick(async()=>{await this.openConfigFile()})),new l.Setting(e).setName("Reset to defaults").setDesc("Reset all settings to their default values").addButton(i=>i.setButtonText("Reset to Defaults").setWarning().onClick(async()=>{confirm("Are you sure you want to reset all settings to defaults?")&&new l.Notice("Settings reset to defaults")})),new l.Setting(e).setName("Export configuration").setDesc("Export your current configuration as JSON").addButton(i=>i.setButtonText("Export JSON").onClick(()=>{this.exportConfiguration()})),new l.Setting(e).setName("Import configuration").setDesc("Import configuration from JSON file").addButton(i=>i.setButtonText("Import JSON").onClick(()=>{this.importConfiguration()}))}async applyCurrentConfiguration(){try{await this.configManager.applyPreset({name:this.settings.currentTemplate,description:"",features:this.settings.features,theme:this.settings.currentTheme,contentOrganization:this.settings.contentOrganization,config:this.settings})?(new l.Notice("Configuration applied successfully!"),await this.configManager.triggerRebuild()):new l.Notice("Failed to apply configuration. Check the console for errors.")}catch(e){new l.Notice(`Error applying configuration: ${e.message}`)}}async openConfigFile(){this.app.vault.getAbstractFileByPath("astro.config.ts")?await this.app.workspace.openLinkText("","astro.config.ts"):new l.Notice("Config file not found. Make sure you have an Astro project in this vault.")}exportConfiguration(){let e=JSON.stringify(this.settings,null,2),t=new Blob([e],{type:"application/json"}),n=URL.createObjectURL(t),a=document.createElement("a");a.href=n,a.download="astro-modular-config.json",document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(n),new l.Notice("Configuration exported successfully!")}importConfiguration(){let e=document.createElement("input");e.type="file",e.accept=".json",e.onchange=async t=>{var a;let n=(a=t.target.files)==null?void 0:a[0];if(n)try{let i=await n.text(),r=JSON.parse(i);this.settings={...this.settings,...r},await this.plugin.saveData(this.settings),this.display(),new l.Notice("Configuration imported successfully!")}catch(i){new l.Notice("Failed to import configuration. Please check the file format.")}},e.click()}};var F=class extends $.Plugin{async onload(){await this.loadSettings(),k(this,this.settings),this.addSettingTab(new w(this.app,this,this.settings)),this.addRibbonIcon("rocket","Astro Modular Settings",()=>{new m(this.app,this.settings,async t=>{this.settings=t,await this.saveSettings()}).open()}),this.settings.runWizardOnStartup&&setTimeout(()=>{this.runStartupWizard()},2e3)}onunload(){}async loadSettings(){this.settings=Object.assign({},x,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async runStartupWizard(){new m(this.app,this.settings,async t=>{this.settings=t,await this.saveSettings()}).open()}openSettings(){this.app.setting.open(),this.app.setting.openTabById(this.manifest.id)}};
