/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var k=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var I=Object.prototype.hasOwnProperty;var L=(c,n)=>{for(var e in n)k(c,e,{get:n[e],enumerable:!0})},N=(c,n,e,t)=>{if(n&&typeof n=="object"||typeof n=="function")for(let i of F(n))!I.call(c,i)&&i!==e&&k(c,i,{get:()=>n[i],enumerable:!(t=D(n,i))||t.enumerable});return c};var $=c=>N(k({},"__esModule",{value:!0}),c);var B={};L(B,{default:()=>x});module.exports=$(B);var P=require("obsidian");var O={runWizardOnStartup:!0,currentTemplate:"standard",currentTheme:"oxygen",contentOrganization:"file-based",features:{commandPalette:!0,tableOfContents:!0,readingTime:!0,linkedMentions:!0,comments:!0},pluginConfig:{obsidianSettings:{attachmentLocation:"subfolder",subfolderName:"attachments"},astroComposerSettings:{creationMode:"file-based",indexFileName:"index"},imageInserterSettings:{insertFormat:"[[attachments/{image-url}]]"}}},v=[{id:"oxygen",name:"Oxygen",description:"Modern, clean design",previewColors:["#3b82f6","#1e40af","#ffffff"]},{id:"minimal",name:"Minimal",description:"Understated with high contrast",previewColors:["#000000","#ffffff","#666666"]},{id:"atom",name:"Atom",description:"Dark theme with vibrant accents",previewColors:["#282c34","#61dafb","#98c379"]},{id:"ayu-light",name:"Ayu Light",description:"Clean light theme",previewColors:["#fafafa","#ff6b6b","#4ecdc4"]},{id:"ayu-mirage",name:"Ayu Mirage",description:"Soft dark theme",previewColors:["#1f2430","#ffcc66","#5ccfe6"]},{id:"ayu-dark",name:"Ayu Dark",description:"Deep dark theme",previewColors:["#0d1117","#ffcc66","#5ccfe6"]},{id:"catppuccin",name:"Catppuccin",description:"Pastel color palette",previewColors:["#1e1e2e","#f5c2e7","#a6e3a1"]},{id:"charcoal",name:"Charcoal",description:"Dark, professional look",previewColors:["#2d2d2d","#ffffff","#ff6b6b"]},{id:"dracula",name:"Dracula",description:"Dark theme with purple accents",previewColors:["#282a36","#bd93f9","#50fa7b"]},{id:"everforest",name:"Everforest",description:"Soft, warm colors",previewColors:["#2d353b","#a7c080","#dbbc7f"]},{id:"flexoki",name:"Flexoki",description:"Based on Material Design 3",previewColors:["#100f0f","#f2f0e5","#ff6b6b"]},{id:"gruvbox",name:"Gruvbox",description:"Retro groove color scheme",previewColors:["#282828","#fabd2f","#b16286"]},{id:"macos",name:"macOS",description:"Native macOS appearance",previewColors:["#ffffff","#007aff","#34c759"]},{id:"nord",name:"Nord",description:"Arctic-inspired color palette",previewColors:["#2e3440","#88c0d0","#a3be8c"]},{id:"obsidian",name:"Obsidian",description:"Matches Obsidian's default theme",previewColors:["#1e1e1e","#ffffff","#7c3aed"]},{id:"rose-pine",name:"Ros\xE9 Pine",description:"All natural pine, faux fir, and winter",previewColors:["#191724","#eb6f92","#9ccfd8"]},{id:"sky",name:"Sky",description:"Light, airy design",previewColors:["#f0f9ff","#0ea5e9","#06b6d4"]},{id:"solarized",name:"Solarized",description:"Precision colors for machines and people",previewColors:["#002b36","#268bd2","#859900"]},{id:"things",name:"Things",description:"Clean, minimal design",previewColors:["#ffffff","#000000","#007aff"]}],y=[{id:"standard",name:"Standard",description:"Full-featured blog with all options enabled",features:["Command palette","Table of contents","Reading time","Linked mentions","Comments"],recommended:!0},{id:"minimal",name:"Minimal",description:"Clean, simple blog with minimal features",features:["Command palette","Table of contents"],recommended:!1},{id:"compact",name:"Compact",description:"Balanced setup for smaller sites",features:["Command palette","Table of contents","Reading time"],recommended:!1},{id:"documentation",name:"Documentation",description:"Optimized for technical documentation",features:["Table of contents","Linked mentions","Comments"],recommended:!1},{id:"custom",name:"Custom",description:"Granular control over every setting",features:["All features configurable"],recommended:!1}];var T=require("obsidian");var h=require("obsidian");var S=require("obsidian"),b=class{constructor(n){this.app=n,this.configPath="astro.config.ts"}async getConfigFileInfo(){let n=this.app.vault.getAbstractFileByPath(this.configPath);if(!n)return{exists:!1,path:this.configPath,content:"",lastModified:new Date,valid:!1,errors:["Config file not found"]};try{let e=await this.app.vault.read(n),t=new Date(n.stat.mtime),i=this.validateConfigContent(e),a=i?[]:["Invalid TypeScript syntax or missing required exports"];return{exists:!0,path:this.configPath,content:e,lastModified:t,valid:i,errors:a}}catch(e){return{exists:!0,path:this.configPath,content:"",lastModified:new Date,valid:!1,errors:[`Error reading file: ${e.message}`]}}}validateConfigContent(n){return n.includes("defineConfig")||n.includes("export default")||n.includes("astro/config")}async readConfig(){return(await this.getConfigFileInfo()).content}async writeConfig(n){try{return await this.app.vault.create(this.configPath,n),new S.Notice("Configuration updated successfully"),!0}catch(e){try{return await this.app.vault.modify(this.app.vault.getAbstractFileByPath(this.configPath),n),new S.Notice("Configuration updated successfully"),!0}catch(t){return new S.Notice(`Error updating configuration: ${t.message}`),!1}}}async applyPreset(n){let e=await this.readConfig(),t=this.generateConfigFromPreset(n,e);return await this.writeConfig(t)}generateConfigFromPreset(n,e){return`import { defineConfig } from 'astro/config';
import astroModular from '@astro-modular/theme';

export default defineConfig({
  site: 'https://example.com',
  integrations: [
    astroModular({
      theme: '${n.theme}',
      contentOrganization: '${n.contentOrganization}',
      features: {
        commandPalette: ${n.features.commandPalette},
        tableOfContents: ${n.features.tableOfContents},
        readingTime: ${n.features.readingTime},
        linkedMentions: ${n.features.linkedMentions},
        comments: ${n.features.comments},
      },
    }),
  ],
});`}async detectAstroDevServer(){let n=this.app.vault.getAbstractFileByPath("package.json");if(n)try{let e=await this.app.vault.read(n);return e.includes("astro")&&e.includes("dev")}catch(e){return!1}return!1}async triggerRebuild(){new S.Notice("Configuration updated. Please restart your Astro dev server to see changes.")}};var C=class{constructor(n){this.app=n}async getPluginStatus(){var i;let n=this.app.plugins,e=["astro-composer","insert-unsplash-image","obsidian-shellcommands"],t=[];for(let a of e){let s=(i=n==null?void 0:n.plugins)==null?void 0:i[a],o=(n==null?void 0:n.enabledPlugins)&&n.enabledPlugins.has(a),p=this.isPluginInstalled(a);t.push({name:this.getPluginDisplayName(a),installed:p,enabled:o,configurable:this.isPluginConfigurable(a),currentSettings:s?await this.getPluginSettings(s):void 0})}return t}isPluginInstalled(n){var i,a;let e=(i=this.app.plugins)==null?void 0:i.communityPlugins;if(e&&Array.isArray(e))return e.includes(n);let t=this.app.plugins;return!!((a=t==null?void 0:t.plugins)!=null&&a[n])}getPluginDisplayName(n){return{"astro-composer":"Astro Composer","insert-unsplash-image":"Image Inserter","obsidian-shellcommands":"Shell Commands"}[n]||n}isPluginConfigurable(n){return["astro-composer","insert-unsplash-image"].includes(n)}async getPluginSettings(n){return{}}async configurePlugins(n){try{return await this.configureObsidianSettings(n.obsidianSettings),await this.configureAstroComposerSettings(n.astroComposerSettings),await this.configureImageInserterSettings(n.imageInserterSettings),!0}catch(e){return console.error("Error configuring plugins:",e),!1}}async configureObsidianSettings(n){let e=this.app.vault.config;n.attachmentLocation==="subfolder"?(e.newLinkFormat="shortest",e.attachmentFolderPath=n.subfolderName):(e.newLinkFormat="shortest",e.attachmentFolderPath=""),await this.app.vault.saveConfig()}async configureAstroComposerSettings(n){console.log("Configuring Astro Composer:",n)}async configureImageInserterSettings(n){console.log("Configuring Image Inserter:",n)}async getManualConfigurationInstructions(n){let e=`# Manual Configuration Instructions

`;return e+=`## Obsidian Settings
`,e+=`1. Go to **Settings \u2192 Files & Links**
`,e+="2. Set **Default location for new attachments** to: ",e+=n.obsidianSettings.attachmentLocation==="subfolder"?'"In subfolder under current folder"':'"Same folder as current file"',e+=`
`,n.obsidianSettings.attachmentLocation==="subfolder"&&(e+=`3. Set **Subfolder name** to: "${n.obsidianSettings.subfolderName}"
`),e+=`
`,e+=`## Astro Composer Plugin
`,e+=`1. Go to **Settings \u2192 Community plugins \u2192 Astro Composer**
`,e+=`2. Set **Creation mode** to: "${n.astroComposerSettings.creationMode}"
`,n.astroComposerSettings.creationMode==="folder-based"&&(e+=`3. Set **Index file name** to: "${n.astroComposerSettings.indexFileName}"
`),e+=`
`,e+=`## Image Inserter Plugin
`,e+=`1. Go to **Settings \u2192 Community plugins \u2192 Image Inserter**
`,e+=`2. Set **Insert to Frontmatter Value Format** to: "${n.imageInserterSettings.insertFormat}"
`,e}};var u=class extends h.Modal{constructor(e,t,i){super(e);this.currentStep=1;this.totalSteps=7;this.selectedTemplate="standard";this.selectedTheme="oxygen";this.selectedContentOrg="file-based";this.selectedFeatures={};this.runWizardOnStartup=!0;this.settings=t,this.configManager=new b(e),this.pluginManager=new C(e),this.onComplete=i}onOpen(){let{contentEl:e}=this;e.empty(),e.addClass("astro-modular-wizard"),this.renderCurrentStep()}onClose(){let{contentEl:e}=this;e.empty()}renderCurrentStep(){let{contentEl:e}=this;e.empty();let t=e.createDiv("wizard-header");t.innerHTML=`
			<div class="wizard-logo">\u{1F680}</div>
			<h1>Astro Modular Setup</h1>
			<div class="wizard-progress">
				<div class="progress-bar">
					<div class="progress-fill" style="width: ${this.currentStep/this.totalSteps*100}%"></div>
				</div>
				<span class="progress-text">Step ${this.currentStep} of ${this.totalSteps}</span>
			</div>
		`;let i=e.createDiv("wizard-content");this.renderStepContent(i);let a=e.createDiv("wizard-footer");this.renderStepFooter(a)}renderStepContent(e){switch(this.currentStep){case 1:this.renderWelcomeStep(e);break;case 2:this.renderTemplateStep(e);break;case 3:this.renderThemeStep(e);break;case 4:this.renderContentOrgStep(e);break;case 5:this.renderFeaturesStep(e);break;case 6:this.renderPluginConfigStep(e);break;case 7:this.renderFinalizeStep(e);break}}renderWelcomeStep(e){e.innerHTML=`
			<div class="welcome-content">
				<h2>Welcome to Astro Modular!</h2>
				<p>This wizard will help you set up your Astro Modular theme with the perfect configuration for your needs.</p>
				<div class="welcome-features">
					<div class="feature-item">
						<span class="feature-icon">\u{1F3A8}</span>
						<span>Beautiful themes</span>
					</div>
					<div class="feature-item">
						<span class="feature-icon">\u26A1</span>
						<span>Fast setup</span>
					</div>
					<div class="feature-item">
						<span class="feature-icon">\u{1F527}</span>
						<span>Easy configuration</span>
					</div>
				</div>
				<p class="welcome-note">
					<a href="https://github.com/astro-modular/docs" target="_blank">\u{1F4D6} View documentation</a>
				</p>
			</div>
		`}renderTemplateStep(e){e.innerHTML=`
			<div class="template-selection">
				<h2>Choose your template</h2>
				<p>Select a template that best fits your content type and goals.</p>
				<div class="template-options">
					${y.map(t=>`
						<div class="template-option ${this.selectedTemplate===t.id?"selected":""}" 
							 data-template="${t.id}">
							<div class="template-header">
								<h3>${t.name}</h3>
								${t.recommended?'<span class="recommended">Recommended</span>':""}
							</div>
							<p class="template-description">${t.description}</p>
							<div class="template-features">
								${t.features.map(i=>`<span class="feature-tag">${i}</span>`).join("")}
							</div>
						</div>
					`).join("")}
				</div>
			</div>
		`,e.querySelectorAll(".template-option").forEach(t=>{t.addEventListener("click",()=>{let i=t.getAttribute("data-template");i&&(this.selectedTemplate=i,this.renderCurrentStep())})})}renderThemeStep(e){e.innerHTML=`
			<div class="theme-selection">
				<h2>Choose your theme</h2>
				<p>Select a color scheme that matches your style and content.</p>
				<div class="theme-options">
					${v.map(t=>`
						<div class="theme-option ${this.selectedTheme===t.id?"selected":""}" 
							 data-theme="${t.id}">
							<div class="theme-preview" style="background: linear-gradient(135deg, ${t.previewColors.join(", ")});">
								<div class="theme-preview-content">
									<div class="preview-text">Sample Text</div>
									<div class="preview-accent">Accent</div>
								</div>
							</div>
							<div class="theme-info">
								<h3>${t.name}</h3>
								<p>${t.description}</p>
							</div>
						</div>
					`).join("")}
				</div>
			</div>
		`,e.querySelectorAll(".theme-option").forEach(t=>{t.addEventListener("click",()=>{let i=t.getAttribute("data-theme");i&&(this.selectedTheme=i,this.renderCurrentStep())})})}renderContentOrgStep(e){e.innerHTML=`
			<div class="content-org-selection">
				<h2>Content organization</h2>
				<p>Choose how you want to organize your content and assets.</p>
				<div class="org-options">
					<div class="org-option ${this.selectedContentOrg==="file-based"?"selected":""}" 
						 data-org="file-based">
						<div class="org-header">
							<h3>File-based</h3>
							<span class="default-badge">Default</span>
						</div>
						<p>Single markdown files with images in attachments subfolder</p>
						<div class="org-example">
							<code>
								posts/<br>
								\u251C\u2500\u2500 my-post.md<br>
								\u2514\u2500\u2500 attachments/<br>
								    \u2514\u2500\u2500 image.jpg
							</code>
						</div>
					</div>
					<div class="org-option ${this.selectedContentOrg==="folder-based"?"selected":""}" 
						 data-org="folder-based">
						<div class="org-header">
							<h3>Folder-based</h3>
						</div>
						<p>Each post gets its own folder with co-located assets</p>
						<div class="org-example">
							<code>
								posts/<br>
								\u251C\u2500\u2500 my-post/<br>
								\u2502   \u251C\u2500\u2500 index.md<br>
								\u2502   \u2514\u2500\u2500 image.jpg<br>
								\u2514\u2500\u2500 another-post/<br>
								    \u251C\u2500\u2500 index.md<br>
								    \u2514\u2500\u2500 image.jpg
							</code>
						</div>
					</div>
				</div>
			</div>
		`,e.querySelectorAll(".org-option").forEach(t=>{t.addEventListener("click",()=>{let i=t.getAttribute("data-org");i&&(this.selectedContentOrg=i,this.renderCurrentStep())})})}renderFeaturesStep(e){if(this.selectedTemplate!=="custom"){this.currentStep++,this.renderCurrentStep();return}e.innerHTML=`
			<div class="features-selection">
				<h2>Configure features</h2>
				<p>Choose which features you want to enable for your site.</p>
				<div class="features-list">
					${Object.entries({commandPalette:"Command palette",tableOfContents:"Table of contents",readingTime:"Reading time",linkedMentions:"Linked mentions",comments:"Comments"}).map(([t,i])=>`
						<div class="feature-setting">
							<label class="feature-toggle">
								<input type="checkbox" ${this.selectedFeatures[t]?"checked":""} data-feature="${t}">
								<span class="toggle-slider"></span>
								<span class="feature-label">${i}</span>
							</label>
						</div>
					`).join("")}
				</div>
			</div>
		`,e.querySelectorAll('input[type="checkbox"]').forEach(t=>{t.addEventListener("change",i=>{let a=i.target,s=a.dataset.feature;s&&(this.selectedFeatures[s]=a.checked)})})}async renderPluginConfigStep(e){var i,a;let t=await this.pluginManager.getPluginStatus();e.innerHTML=`
			<div class="plugin-config">
				<h2>Plugin configuration</h2>
				<p>We'll automatically configure your plugins based on your choices.</p>
				<div class="plugin-status">
					${t.map(s=>`
						<div class="plugin-item ${s.installed?"installed":"missing"}">
							<div class="plugin-icon">${s.installed?"\u2705":"\u274C"}</div>
							<div class="plugin-info">
								<h3>${s.name}</h3>
								<p>${s.installed?"Ready to configure":"Not installed"}</p>
							</div>
						</div>
					`).join("")}
				</div>
				<div class="config-options">
					<button class="config-button primary" id="auto-configure">Configure automatically</button>
					<button class="config-button secondary" id="manual-configure">Show manual instructions</button>
				</div>
			</div>
		`,(i=e.querySelector("#auto-configure"))==null||i.addEventListener("click",()=>{this.configurePlugins()}),(a=e.querySelector("#manual-configure"))==null||a.addEventListener("click",()=>{this.showManualInstructions()})}renderFinalizeStep(e){var t,i,a;e.innerHTML=`
			<div class="finalize-step">
				<h2>Almost done!</h2>
				<p>Review your configuration and complete the setup.</p>
				<div class="config-summary">
					<div class="summary-item">
						<strong>Template:</strong> ${(t=y.find(s=>s.id===this.selectedTemplate))==null?void 0:t.name}
					</div>
					<div class="summary-item">
						<strong>Theme:</strong> ${(i=v.find(s=>s.id===this.selectedTheme))==null?void 0:i.name}
					</div>
					<div class="summary-item">
						<strong>Organization:</strong> ${this.selectedContentOrg==="file-based"?"File-based":"Folder-based"}
					</div>
				</div>
				<div class="finalize-options">
					<label class="checkbox-option">
						<input type="checkbox" ${this.runWizardOnStartup?"checked":""} id="run-on-startup">
						<span>Run wizard on startup</span>
					</label>
				</div>
			</div>
		`,(a=e.querySelector("#run-on-startup"))==null||a.addEventListener("change",s=>{this.runWizardOnStartup=s.target.checked})}renderStepFooter(e){let t=e.createDiv("wizard-buttons");this.currentStep>1&&t.createEl("button",{text:"Previous",cls:"wizard-button secondary"}).addEventListener("click",()=>{this.currentStep--,this.renderCurrentStep()}),t.createEl("button",{text:this.currentStep===this.totalSteps?"Complete Setup":"Next",cls:"wizard-button primary"}).addEventListener("click",()=>{this.currentStep===this.totalSteps?this.completeSetup():(this.currentStep++,this.renderCurrentStep())}),this.currentStep<this.totalSteps&&t.createEl("button",{text:"Skip",cls:"wizard-button tertiary"}).addEventListener("click",()=>{this.currentStep++,this.renderCurrentStep()})}async configurePlugins(){let e={obsidianSettings:{attachmentLocation:this.selectedContentOrg==="file-based"?"subfolder":"same-folder",subfolderName:"attachments"},astroComposerSettings:{creationMode:this.selectedContentOrg,indexFileName:"index"},imageInserterSettings:{insertFormat:this.selectedContentOrg==="file-based"?"[[attachments/{image-url}]]":"[[{image-url}]]"}};await this.pluginManager.configurePlugins(e)?new h.Notice("Plugins configured successfully!"):new h.Notice("Some plugins could not be configured automatically. Check the manual instructions.")}async showManualInstructions(){let e={obsidianSettings:{attachmentLocation:this.selectedContentOrg==="file-based"?"subfolder":"same-folder",subfolderName:"attachments"},astroComposerSettings:{creationMode:this.selectedContentOrg,indexFileName:"index"},imageInserterSettings:{insertFormat:this.selectedContentOrg==="file-based"?"[[attachments/{image-url}]]":"[[{image-url}]]"}},t=await this.pluginManager.getManualConfigurationInstructions(e),i=new h.Modal(this.app);i.titleEl.setText("Manual Configuration Instructions"),i.contentEl.innerHTML=`<pre>${t}</pre>`,i.open()}async completeSetup(){this.settings.currentTemplate=this.selectedTemplate,this.settings.currentTheme=this.selectedTheme,this.settings.contentOrganization=this.selectedContentOrg,this.settings.runWizardOnStartup=this.runWizardOnStartup,await this.configManager.applyPreset({name:this.selectedTemplate,description:"",features:this.selectedFeatures,theme:this.selectedTheme,contentOrganization:this.selectedContentOrg,config:this.settings}),await this.configManager.triggerRebuild(),this.onComplete(this.settings),this.close(),new h.Notice("Astro Modular setup complete! \u{1F389}")}};function A(c,n){c.addCommand({id:"open-settings",name:"Open Astro Modular Settings",callback:()=>{c.openSettings()}}),c.addCommand({id:"run-setup-wizard",name:"Run Setup Wizard",callback:()=>{new u(c.app,n,async t=>{n=t,await c.saveData(n)}).open()}}),c.addCommand({id:"open-config",name:"Open config.ts",callback:async()=>{c.app.vault.getAbstractFileByPath("astro.config.ts")?await c.app.workspace.openLinkText("","astro.config.ts"):new T.Notice("Config file not found. Make sure you have an Astro project in this vault.")}}),c.addCommand({id:"apply-configuration",name:"Apply Current Configuration",callback:async()=>{new T.Notice("Configuration applied successfully!")}}),c.addCommand({id:"toggle-wizard-startup",name:"Toggle Wizard on Startup",callback:async()=>{n.runWizardOnStartup=!n.runWizardOnStartup,await c.saveData(n),new T.Notice(`Wizard on startup ${n.runWizardOnStartup?"enabled":"disabled"}`)}})}var r=require("obsidian");var M=class extends r.PluginSettingTab{constructor(e,t,i){super(e,t);this.plugin=t,this.settings=i,this.configManager=new b(e),this.pluginManager=new C(e)}display(){let{containerEl:e}=this;e.empty(),e.addClass("astro-modular-settings");let t=e.createDiv("tab-container"),i=t.createDiv("tab-nav"),a=t.createDiv("tab-content"),s=[{id:"general",name:"General",description:"Basic settings and configuration overview",render:()=>this.renderGeneralTab(a)},{id:"quick-config",name:"Quick Config",description:"Fast template and theme changes",render:()=>this.renderQuickConfigTab(a)},{id:"features",name:"Features",description:"Enable or disable theme features",render:()=>this.renderFeaturesTab(a)},{id:"plugin-settings",name:"Plugin Settings",description:"Manage Obsidian plugin configurations",render:()=>this.renderPluginTab(a)},{id:"advanced",name:"Advanced",description:"Advanced options and utilities",render:()=>this.renderAdvancedTab(a)}];s.forEach((o,p)=>{let l=i.createEl("button",{text:o.name,cls:`tab-button ${p===0?"active":""}`});l.title=o.description,l.addEventListener("click",()=>{i.querySelectorAll(".tab-button").forEach(d=>d.classList.remove("active")),l.classList.add("active"),a.style.opacity="0",setTimeout(()=>{a.empty(),o.render(),a.style.opacity="1"},150)})}),s[0].render()}renderGeneralTab(e){var m,w;e.empty();let t=e.createDiv("settings-section"),i=t.createEl("h2",{text:"General Settings"}),a=t.createEl("p",{text:"Configure basic plugin behavior and view current status."});new r.Setting(e).setName("Run wizard on startup").setDesc("Show the setup wizard when Obsidian starts (if not disabled)").addToggle(f=>f.setValue(this.settings.runWizardOnStartup).onChange(async E=>{this.settings.runWizardOnStartup=E,await this.plugin.saveData(this.settings)}));let o=e.createDiv("config-display").createDiv("config-info"),p=o.createEl("h3",{text:"Current Configuration"}),l=o.createDiv("config-item");l.createEl("strong",{text:"Template: "}),l.createSpan({text:((m=y.find(f=>f.id===this.settings.currentTemplate))==null?void 0:m.name)||"Unknown"});let d=o.createDiv("config-item");d.createEl("strong",{text:"Theme: "}),d.createSpan({text:((w=v.find(f=>f.id===this.settings.currentTheme))==null?void 0:w.name)||"Unknown"});let g=o.createDiv("config-item");g.createEl("strong",{text:"Organization: "}),g.createSpan({text:this.settings.contentOrganization==="file-based"?"File-based":"Folder-based"}),new r.Setting(e).setName("Setup wizard").setDesc("Run the setup wizard to reconfigure your theme").addButton(f=>f.setButtonText("Run Setup Wizard").setCta().onClick(()=>{new u(this.app,this.settings,async z=>{this.settings=z,await this.plugin.saveData(this.settings),this.display()}).open()}))}renderQuickConfigTab(e){e.empty();let t=e.createDiv("settings-section"),i=t.createEl("h2",{text:"Quick Configuration"}),a=t.createEl("p",{text:"Quickly change your template, theme, and content organization."});new r.Setting(e).setName("Template").setDesc("Choose your content template").addDropdown(s=>{y.forEach(o=>{s.addOption(o.id,o.name)}),s.setValue(this.settings.currentTemplate),s.onChange(async o=>{this.settings.currentTemplate=o,await this.plugin.saveData(this.settings),this.display()})}),new r.Setting(e).setName("Theme").setDesc("Choose your color theme").addDropdown(s=>{v.forEach(o=>{s.addOption(o.id,o.name)}),s.setValue(this.settings.currentTheme),s.onChange(async o=>{this.settings.currentTheme=o,await this.plugin.saveData(this.settings)})}),new r.Setting(e).setName("Content organization").setDesc("Choose how to organize your content and assets").addDropdown(s=>{s.addOption("file-based","File-based"),s.addOption("folder-based","Folder-based"),s.setValue(this.settings.contentOrganization),s.onChange(async o=>{this.settings.contentOrganization=o,await this.plugin.saveData(this.settings)})}),new r.Setting(e).setName("Apply configuration").setDesc("Apply the current settings to your Astro configuration").addButton(s=>s.setButtonText("Apply Configuration").setCta().onClick(async()=>{await this.applyCurrentConfiguration()})),new r.Setting(e).setName("Edit config.ts directly").setDesc("Open your Astro configuration file in the editor").addButton(s=>s.setButtonText("Open config.ts").onClick(async()=>{await this.openConfigFile()}))}renderFeaturesTab(e){e.empty();let t=e.createDiv("settings-section"),i=t.createEl("h2",{text:"Feature Configuration"}),a=t.createEl("p",{text:"Enable or disable specific features for your site."});[{key:"commandPalette",name:"Command palette",desc:"Add a command palette to your site"},{key:"tableOfContents",name:"Table of contents",desc:"Show table of contents on pages"},{key:"readingTime",name:"Reading time",desc:"Display estimated reading time"},{key:"linkedMentions",name:"Linked mentions",desc:"Show linked mentions and backlinks"},{key:"comments",name:"Comments",desc:"Enable comment system"}].forEach(o=>{new r.Setting(e).setName(o.name).setDesc(o.desc).addToggle(p=>p.setValue(this.settings.features[o.key]).onChange(async l=>{this.settings.features[o.key]=l,await this.plugin.saveData(this.settings)}))}),new r.Setting(e).setName("Save configuration").setDesc("Save your feature settings to the configuration file").addButton(o=>o.setButtonText("Save Configuration").setCta().onClick(async()=>{await this.applyCurrentConfiguration()}))}async renderPluginTab(e){e.empty();let t=e.createDiv("settings-section"),i=t.createEl("h2",{text:"Plugin Configuration"}),a=t.createEl("p",{text:"Manage your Obsidian plugins and their settings."}),s=await this.pluginManager.getPluginStatus(),p=e.createDiv("plugin-status-container").createDiv("plugin-status");for(let l of s){let d=p.createDiv(`plugin-item ${l.installed?"installed":"missing"}`),g=d.createDiv("plugin-icon");g.textContent=l.installed?"\u2705":"\u274C";let m=d.createDiv("plugin-info");m.createEl("h3",{text:l.name});let w=l.installed?l.enabled?"Enabled":"Disabled":"Not installed";m.createEl("p",{text:w})}new r.Setting(e).setName("Configure automatically").setDesc("Automatically configure all installed plugins").addButton(l=>l.setButtonText("Configure Automatically").setCta().onClick(async()=>{await this.pluginManager.configurePlugins(this.settings.pluginConfig)?new r.Notice("Plugins configured successfully!"):new r.Notice("Some plugins could not be configured automatically.")})),new r.Setting(e).setName("Show manual instructions").setDesc("Get step-by-step instructions for manual configuration").addButton(l=>l.setButtonText("Show Manual Instructions").onClick(async()=>{let d=await this.pluginManager.getManualConfigurationInstructions(this.settings.pluginConfig),g=new r.Modal(this.app);g.titleEl.setText("Manual Configuration Instructions");let m=g.contentEl.createEl("pre");m.textContent=d,g.open()}))}renderAdvancedTab(e){e.empty();let t=e.createDiv("settings-section"),i=t.createEl("h2",{text:"Advanced Settings"}),a=t.createEl("p",{text:"Advanced configuration options and utilities."});new r.Setting(e).setName("Open config.ts in editor").setDesc("Open your Astro configuration file in the editor").addButton(s=>s.setButtonText("Open config.ts").onClick(async()=>{await this.openConfigFile()})),new r.Setting(e).setName("Reset to defaults").setDesc("Reset all settings to their default values").addButton(s=>s.setButtonText("Reset to Defaults").setWarning().onClick(async()=>{confirm("Are you sure you want to reset all settings to defaults?")&&new r.Notice("Settings reset to defaults")})),new r.Setting(e).setName("Export configuration").setDesc("Export your current configuration as JSON").addButton(s=>s.setButtonText("Export JSON").onClick(()=>{this.exportConfiguration()})),new r.Setting(e).setName("Import configuration").setDesc("Import configuration from JSON file").addButton(s=>s.setButtonText("Import JSON").onClick(()=>{this.importConfiguration()}))}async applyCurrentConfiguration(){try{await this.configManager.applyPreset({name:this.settings.currentTemplate,description:"",features:this.settings.features,theme:this.settings.currentTheme,contentOrganization:this.settings.contentOrganization,config:this.settings})?(new r.Notice("Configuration applied successfully!"),await this.configManager.triggerRebuild()):new r.Notice("Failed to apply configuration. Check the console for errors.")}catch(e){new r.Notice(`Error applying configuration: ${e.message}`)}}async openConfigFile(){this.app.vault.getAbstractFileByPath("astro.config.ts")?await this.app.workspace.openLinkText("","astro.config.ts"):new r.Notice("Config file not found. Make sure you have an Astro project in this vault.")}exportConfiguration(){let e=JSON.stringify(this.settings,null,2),t=new Blob([e],{type:"application/json"}),i=URL.createObjectURL(t),a=document.createElement("a");a.href=i,a.download="astro-modular-config.json",document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(i),new r.Notice("Configuration exported successfully!")}importConfiguration(){let e=document.createElement("input");e.type="file",e.accept=".json",e.onchange=async t=>{var a;let i=(a=t.target.files)==null?void 0:a[0];if(i)try{let s=await i.text(),o=JSON.parse(s);this.settings={...this.settings,...o},await this.plugin.saveData(this.settings),this.display(),new r.Notice("Configuration imported successfully!")}catch(s){new r.Notice("Failed to import configuration. Please check the file format.")}},e.click()}};var x=class extends P.Plugin{async onload(){await this.loadSettings(),A(this,this.settings),this.addSettingTab(new M(this.app,this,this.settings)),this.addRibbonIcon("rocket","Astro Modular Settings",()=>{new u(this.app,this.settings,async t=>{this.settings=t,await this.saveSettings()}).open()}),this.settings.runWizardOnStartup&&setTimeout(()=>{this.runStartupWizard()},2e3),this.settings.currentTemplate==="standard"&&this.settings.currentTheme==="oxygen"&&new P.Notice("Astro Modular Settings loaded! Click the rocket icon to get started.")}onunload(){}async loadSettings(){this.settings=Object.assign({},O,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async runStartupWizard(){new u(this.app,this.settings,async t=>{this.settings=t,await this.saveSettings()}).open()}openSettings(){this.app.setting.open(),this.app.setting.openTabById(this.manifest.id)}};
